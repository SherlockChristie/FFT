// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_fft32_Pipeline_output_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_stream_TREADY,
        stage2_real,
        stage2_real_30,
        stage2_real_32,
        stage2_real_34,
        stage2_real_36,
        stage2_real_38,
        stage2_real_40,
        stage2_real_42,
        stage2_real_44,
        stage2_real_46,
        stage2_real_48,
        stage2_real_50,
        stage2_real_52,
        stage2_real_54,
        stage2_real_56,
        stage2_real_58,
        stage2_real_29,
        stage2_real_31,
        stage2_real_33,
        stage2_real_35,
        stage2_real_37,
        stage2_real_39,
        stage2_real_41,
        stage2_real_43,
        stage2_real_45,
        stage2_real_47,
        stage2_real_49,
        stage2_real_51,
        stage2_real_53,
        stage2_real_55,
        stage2_real_57,
        stage2_real_59,
        stage2_imag,
        stage2_imag_30,
        stage2_imag_32,
        stage2_imag_34,
        stage2_imag_36,
        stage2_imag_38,
        stage2_imag_40,
        stage2_imag_42,
        stage2_imag_44,
        stage2_imag_46,
        stage2_imag_48,
        stage2_imag_50,
        stage2_imag_52,
        stage2_imag_54,
        stage2_imag_56,
        stage2_imag_58,
        stage2_imag_29,
        stage2_imag_31,
        stage2_imag_33,
        stage2_imag_35,
        stage2_imag_37,
        stage2_imag_39,
        stage2_imag_41,
        stage2_imag_43,
        stage2_imag_45,
        stage2_imag_47,
        stage2_imag_49,
        stage2_imag_51,
        stage2_imag_53,
        stage2_imag_55,
        stage2_imag_57,
        stage2_imag_59,
        out_stream_TDATA,
        out_stream_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   out_stream_TREADY;
input  [15:0] stage2_real;
input  [15:0] stage2_real_30;
input  [15:0] stage2_real_32;
input  [15:0] stage2_real_34;
input  [15:0] stage2_real_36;
input  [15:0] stage2_real_38;
input  [15:0] stage2_real_40;
input  [15:0] stage2_real_42;
input  [15:0] stage2_real_44;
input  [15:0] stage2_real_46;
input  [15:0] stage2_real_48;
input  [15:0] stage2_real_50;
input  [15:0] stage2_real_52;
input  [15:0] stage2_real_54;
input  [15:0] stage2_real_56;
input  [15:0] stage2_real_58;
input  [15:0] stage2_real_29;
input  [15:0] stage2_real_31;
input  [15:0] stage2_real_33;
input  [15:0] stage2_real_35;
input  [15:0] stage2_real_37;
input  [15:0] stage2_real_39;
input  [15:0] stage2_real_41;
input  [15:0] stage2_real_43;
input  [15:0] stage2_real_45;
input  [15:0] stage2_real_47;
input  [15:0] stage2_real_49;
input  [15:0] stage2_real_51;
input  [15:0] stage2_real_53;
input  [15:0] stage2_real_55;
input  [15:0] stage2_real_57;
input  [15:0] stage2_real_59;
input  [15:0] stage2_imag;
input  [15:0] stage2_imag_30;
input  [15:0] stage2_imag_32;
input  [15:0] stage2_imag_34;
input  [15:0] stage2_imag_36;
input  [15:0] stage2_imag_38;
input  [15:0] stage2_imag_40;
input  [15:0] stage2_imag_42;
input  [15:0] stage2_imag_44;
input  [15:0] stage2_imag_46;
input  [15:0] stage2_imag_48;
input  [15:0] stage2_imag_50;
input  [15:0] stage2_imag_52;
input  [15:0] stage2_imag_54;
input  [15:0] stage2_imag_56;
input  [15:0] stage2_imag_58;
input  [15:0] stage2_imag_29;
input  [15:0] stage2_imag_31;
input  [15:0] stage2_imag_33;
input  [15:0] stage2_imag_35;
input  [15:0] stage2_imag_37;
input  [15:0] stage2_imag_39;
input  [15:0] stage2_imag_41;
input  [15:0] stage2_imag_43;
input  [15:0] stage2_imag_45;
input  [15:0] stage2_imag_47;
input  [15:0] stage2_imag_49;
input  [15:0] stage2_imag_51;
input  [15:0] stage2_imag_53;
input  [15:0] stage2_imag_55;
input  [15:0] stage2_imag_57;
input  [15:0] stage2_imag_59;
output  [47:0] out_stream_TDATA;
output   out_stream_TVALID;

reg ap_idle;
reg out_stream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln152_fu_573_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_s_fu_589_p34;
reg   [15:0] tmp_s_reg_762;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] tmp_1_fu_659_p34;
reg   [15:0] tmp_1_reg_767;
wire   [0:0] icmp_ln156_fu_729_p2;
reg   [0:0] icmp_ln156_reg_772;
reg   [5:0] i_fu_170;
wire   [5:0] add_ln152_fu_579_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln152_fu_585_p1;
wire   [32:0] tmp_2_fu_740_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft32_mux_32_5_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_32_5_16_1_1_U433(
    .din0(stage2_real),
    .din1(stage2_real_30),
    .din2(stage2_real_32),
    .din3(stage2_real_34),
    .din4(stage2_real_36),
    .din5(stage2_real_38),
    .din6(stage2_real_40),
    .din7(stage2_real_42),
    .din8(stage2_real_44),
    .din9(stage2_real_46),
    .din10(stage2_real_48),
    .din11(stage2_real_50),
    .din12(stage2_real_52),
    .din13(stage2_real_54),
    .din14(stage2_real_56),
    .din15(stage2_real_58),
    .din16(stage2_real_29),
    .din17(stage2_real_31),
    .din18(stage2_real_33),
    .din19(stage2_real_35),
    .din20(stage2_real_37),
    .din21(stage2_real_39),
    .din22(stage2_real_41),
    .din23(stage2_real_43),
    .din24(stage2_real_45),
    .din25(stage2_real_47),
    .din26(stage2_real_49),
    .din27(stage2_real_51),
    .din28(stage2_real_53),
    .din29(stage2_real_55),
    .din30(stage2_real_57),
    .din31(stage2_real_59),
    .din32(trunc_ln152_fu_585_p1),
    .dout(tmp_s_fu_589_p34)
);

fft32_mux_32_5_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_32_5_16_1_1_U434(
    .din0(stage2_imag),
    .din1(stage2_imag_30),
    .din2(stage2_imag_32),
    .din3(stage2_imag_34),
    .din4(stage2_imag_36),
    .din5(stage2_imag_38),
    .din6(stage2_imag_40),
    .din7(stage2_imag_42),
    .din8(stage2_imag_44),
    .din9(stage2_imag_46),
    .din10(stage2_imag_48),
    .din11(stage2_imag_50),
    .din12(stage2_imag_52),
    .din13(stage2_imag_54),
    .din14(stage2_imag_56),
    .din15(stage2_imag_58),
    .din16(stage2_imag_29),
    .din17(stage2_imag_31),
    .din18(stage2_imag_33),
    .din19(stage2_imag_35),
    .din20(stage2_imag_37),
    .din21(stage2_imag_39),
    .din22(stage2_imag_41),
    .din23(stage2_imag_43),
    .din24(stage2_imag_45),
    .din25(stage2_imag_47),
    .din26(stage2_imag_49),
    .din27(stage2_imag_51),
    .din28(stage2_imag_53),
    .din29(stage2_imag_55),
    .din30(stage2_imag_57),
    .din31(stage2_imag_59),
    .din32(trunc_ln152_fu_585_p1),
    .dout(tmp_1_fu_659_p34)
);

fft32_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln152_fu_573_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_170 <= add_ln152_fu_579_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_170 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_573_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln156_reg_772 <= icmp_ln156_fu_729_p2;
        tmp_1_reg_767 <= tmp_1_fu_659_p34;
        tmp_s_reg_762 <= tmp_s_fu_589_p34;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_573_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_170;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_TVALID = 1'b1;
    end else begin
        out_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln152_fu_579_p2 = (ap_sig_allocacmp_i_1 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((out_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((out_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((out_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (out_stream_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln152_fu_573_p2 = ((ap_sig_allocacmp_i_1 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_729_p2 = ((ap_sig_allocacmp_i_1 == 6'd31) ? 1'b1 : 1'b0);

assign out_stream_TDATA = tmp_2_fu_740_p4;

assign tmp_2_fu_740_p4 = {{{icmp_ln156_reg_772}, {tmp_1_reg_767}}, {tmp_s_reg_762}};

assign trunc_ln152_fu_585_p1 = ap_sig_allocacmp_i_1[4:0];

endmodule //fft32_fft32_Pipeline_output_loop
