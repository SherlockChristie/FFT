// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        z,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] z;
output  [16:0] p_out;
output   p_out_ap_vld;
output  [16:0] p_out1;
output   p_out1_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln87_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] cordic_apfixed_circ_table_arctan_128_address0;
reg    cordic_apfixed_circ_table_arctan_128_ce0;
wire   [125:0] cordic_apfixed_circ_table_arctan_128_q0;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] n_1_reg_306;
reg   [4:0] n_1_reg_306_pp0_iter1_reg;
reg   [0:0] icmp_ln87_reg_311;
reg   [0:0] icmp_ln87_reg_311_pp0_iter1_reg;
reg   [14:0] tmp_3_reg_320;
wire   [17:0] tx_fu_241_p3;
reg   [17:0] tx_reg_325;
wire   [17:0] ty_fu_249_p3;
reg   [17:0] ty_reg_330;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln87_fu_140_p1;
wire    ap_block_pp0_stage0;
reg   [17:0] tz_1_fu_52;
wire   [17:0] tz_fu_257_p3;
wire  signed [17:0] z_cast_fu_101_p1;
wire    ap_loop_init;
reg   [17:0] tx_1_fu_56;
reg   [17:0] ap_sig_allocacmp_tx_1_load;
reg   [17:0] ty_1_fu_60;
reg   [17:0] ap_sig_allocacmp_ty_1_load;
reg   [4:0] n_fu_64;
wire   [4:0] add_ln87_fu_134_p2;
reg   [4:0] ap_sig_allocacmp_n_1;
wire    ap_block_pp0_stage0_01001;
wire   [17:0] zext_ln97_fu_187_p1;
wire   [17:0] y_s_fu_196_p2;
wire   [17:0] x_s_fu_190_p2;
wire   [17:0] zext_ln99_fu_202_p1;
wire   [0:0] d_fu_179_p3;
wire   [17:0] add_ln102_fu_205_p2;
wire   [17:0] sub_ln107_fu_223_p2;
wire   [17:0] sub_ln103_fu_211_p2;
wire   [17:0] add_ln108_fu_229_p2;
wire   [17:0] add_ln104_fu_217_p2;
wire   [17:0] sub_ln109_fu_235_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1_cordic_apfixed_circ_table_arctanbkb #(
    .DataWidth( 126 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
cordic_apfixed_circ_table_arctan_128_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_apfixed_circ_table_arctan_128_address0),
    .ce0(cordic_apfixed_circ_table_arctan_128_ce0),
    .q0(cordic_apfixed_circ_table_arctan_128_q0)
);

fft32_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln87_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_64 <= add_ln87_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_64 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tx_1_fu_56 <= 18'd19898;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            tx_1_fu_56 <= tx_reg_325;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            ty_1_fu_60 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            ty_1_fu_60 <= ty_reg_330;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            tz_1_fu_52 <= z_cast_fu_101_p1;
        end else if (((icmp_ln87_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            tz_1_fu_52 <= tz_fu_257_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln87_reg_311 <= icmp_ln87_fu_128_p2;
        icmp_ln87_reg_311_pp0_iter1_reg <= icmp_ln87_reg_311;
        n_1_reg_306 <= ap_sig_allocacmp_n_1;
        n_1_reg_306_pp0_iter1_reg <= n_1_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_311 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_320 <= {{cordic_apfixed_circ_table_arctan_128_q0[125:111]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_311_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_reg_325 <= tx_fu_241_p3;
        ty_reg_330 <= ty_fu_249_p3;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_311_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_tx_1_load = tx_reg_325;
    end else begin
        ap_sig_allocacmp_tx_1_load = tx_1_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_ty_1_load = ty_reg_330;
    end else begin
        ap_sig_allocacmp_ty_1_load = ty_1_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cordic_apfixed_circ_table_arctan_128_ce0 = 1'b1;
    end else begin
        cordic_apfixed_circ_table_arctan_128_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_311_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_311_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_205_p2 = (y_s_fu_196_p2 + ap_sig_allocacmp_tx_1_load);

assign add_ln104_fu_217_p2 = (zext_ln99_fu_202_p1 + tz_1_fu_52);

assign add_ln108_fu_229_p2 = (x_s_fu_190_p2 + ap_sig_allocacmp_ty_1_load);

assign add_ln87_fu_134_p2 = (ap_sig_allocacmp_n_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cordic_apfixed_circ_table_arctan_128_address0 = zext_ln87_fu_140_p1;

assign d_fu_179_p3 = tz_1_fu_52[32'd17];

assign icmp_ln87_fu_128_p2 = ((ap_sig_allocacmp_n_1 == 5'd18) ? 1'b1 : 1'b0);

assign p_out = ap_sig_allocacmp_ty_1_load[16:0];

assign p_out1 = ap_sig_allocacmp_tx_1_load[16:0];

assign sub_ln103_fu_211_p2 = (ap_sig_allocacmp_ty_1_load - x_s_fu_190_p2);

assign sub_ln107_fu_223_p2 = (ap_sig_allocacmp_tx_1_load - y_s_fu_196_p2);

assign sub_ln109_fu_235_p2 = (tz_1_fu_52 - zext_ln99_fu_202_p1);

assign tx_fu_241_p3 = ((d_fu_179_p3[0:0] == 1'b1) ? add_ln102_fu_205_p2 : sub_ln107_fu_223_p2);

assign ty_fu_249_p3 = ((d_fu_179_p3[0:0] == 1'b1) ? sub_ln103_fu_211_p2 : add_ln108_fu_229_p2);

assign tz_fu_257_p3 = ((d_fu_179_p3[0:0] == 1'b1) ? add_ln104_fu_217_p2 : sub_ln109_fu_235_p2);

assign x_s_fu_190_p2 = $signed(ap_sig_allocacmp_tx_1_load) >>> zext_ln97_fu_187_p1;

assign y_s_fu_196_p2 = $signed(ap_sig_allocacmp_ty_1_load) >>> zext_ln97_fu_187_p1;

assign z_cast_fu_101_p1 = $signed(z);

assign zext_ln87_fu_140_p1 = ap_sig_allocacmp_n_1;

assign zext_ln97_fu_187_p1 = n_1_reg_306_pp0_iter1_reg;

assign zext_ln99_fu_202_p1 = tmp_3_reg_320;

endmodule //fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1
