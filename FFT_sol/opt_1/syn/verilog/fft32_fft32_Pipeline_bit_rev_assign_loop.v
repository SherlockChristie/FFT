// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_fft32_Pipeline_bit_rev_assign_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_real_reload,
        data_real_1_reload,
        data_real_2_reload,
        data_real_3_reload,
        data_real_4_reload,
        data_real_5_reload,
        data_real_6_reload,
        data_real_7_reload,
        data_real_8_reload,
        data_real_9_reload,
        data_real_10_reload,
        data_real_11_reload,
        data_real_12_reload,
        data_real_13_reload,
        data_real_14_reload,
        data_real_15_reload,
        data_real_16_reload,
        data_real_17_reload,
        data_real_18_reload,
        data_real_19_reload,
        data_real_20_reload,
        data_real_21_reload,
        data_real_22_reload,
        data_real_23_reload,
        data_real_24_reload,
        data_real_25_reload,
        data_real_26_reload,
        data_real_27_reload,
        data_real_28_reload,
        data_real_29_reload,
        data_real_30_reload,
        data_real_31_reload,
        data_imag_reload,
        data_imag_1_reload,
        data_imag_2_reload,
        data_imag_3_reload,
        data_imag_4_reload,
        data_imag_5_reload,
        data_imag_6_reload,
        data_imag_7_reload,
        data_imag_8_reload,
        data_imag_9_reload,
        data_imag_10_reload,
        data_imag_11_reload,
        data_imag_12_reload,
        data_imag_13_reload,
        data_imag_14_reload,
        data_imag_15_reload,
        data_imag_16_reload,
        data_imag_17_reload,
        data_imag_18_reload,
        data_imag_19_reload,
        data_imag_20_reload,
        data_imag_21_reload,
        data_imag_22_reload,
        data_imag_23_reload,
        data_imag_24_reload,
        data_imag_25_reload,
        data_imag_26_reload,
        data_imag_27_reload,
        data_imag_28_reload,
        data_imag_29_reload,
        data_imag_30_reload,
        data_imag_31_reload,
        stage0_imag_31_out,
        stage0_imag_31_out_ap_vld,
        stage0_imag_30_out,
        stage0_imag_30_out_ap_vld,
        stage0_imag_29_out,
        stage0_imag_29_out_ap_vld,
        stage0_imag_28_out,
        stage0_imag_28_out_ap_vld,
        stage0_imag_27_out,
        stage0_imag_27_out_ap_vld,
        stage0_imag_26_out,
        stage0_imag_26_out_ap_vld,
        stage0_imag_25_out,
        stage0_imag_25_out_ap_vld,
        stage0_imag_24_out,
        stage0_imag_24_out_ap_vld,
        stage0_imag_23_out,
        stage0_imag_23_out_ap_vld,
        stage0_imag_22_out,
        stage0_imag_22_out_ap_vld,
        stage0_imag_21_out,
        stage0_imag_21_out_ap_vld,
        stage0_imag_20_out,
        stage0_imag_20_out_ap_vld,
        stage0_imag_19_out,
        stage0_imag_19_out_ap_vld,
        stage0_imag_18_out,
        stage0_imag_18_out_ap_vld,
        stage0_imag_17_out,
        stage0_imag_17_out_ap_vld,
        stage0_imag_16_out,
        stage0_imag_16_out_ap_vld,
        stage0_imag_15_out,
        stage0_imag_15_out_ap_vld,
        stage0_imag_14_out,
        stage0_imag_14_out_ap_vld,
        stage0_imag_13_out,
        stage0_imag_13_out_ap_vld,
        stage0_imag_12_out,
        stage0_imag_12_out_ap_vld,
        stage0_imag_11_out,
        stage0_imag_11_out_ap_vld,
        stage0_imag_10_out,
        stage0_imag_10_out_ap_vld,
        stage0_imag_9_out,
        stage0_imag_9_out_ap_vld,
        stage0_imag_8_out,
        stage0_imag_8_out_ap_vld,
        stage0_imag_7_out,
        stage0_imag_7_out_ap_vld,
        stage0_imag_6_out,
        stage0_imag_6_out_ap_vld,
        stage0_imag_5_out,
        stage0_imag_5_out_ap_vld,
        stage0_imag_4_out,
        stage0_imag_4_out_ap_vld,
        stage0_imag_3_out,
        stage0_imag_3_out_ap_vld,
        stage0_imag_2_out,
        stage0_imag_2_out_ap_vld,
        stage0_imag_1_out,
        stage0_imag_1_out_ap_vld,
        stage0_imag_out,
        stage0_imag_out_ap_vld,
        stage0_real_31_out,
        stage0_real_31_out_ap_vld,
        stage0_real_30_out,
        stage0_real_30_out_ap_vld,
        stage0_real_29_out,
        stage0_real_29_out_ap_vld,
        stage0_real_28_out,
        stage0_real_28_out_ap_vld,
        stage0_real_27_out,
        stage0_real_27_out_ap_vld,
        stage0_real_26_out,
        stage0_real_26_out_ap_vld,
        stage0_real_25_out,
        stage0_real_25_out_ap_vld,
        stage0_real_24_out,
        stage0_real_24_out_ap_vld,
        stage0_real_23_out,
        stage0_real_23_out_ap_vld,
        stage0_real_22_out,
        stage0_real_22_out_ap_vld,
        stage0_real_21_out,
        stage0_real_21_out_ap_vld,
        stage0_real_20_out,
        stage0_real_20_out_ap_vld,
        stage0_real_19_out,
        stage0_real_19_out_ap_vld,
        stage0_real_18_out,
        stage0_real_18_out_ap_vld,
        stage0_real_17_out,
        stage0_real_17_out_ap_vld,
        stage0_real_16_out,
        stage0_real_16_out_ap_vld,
        stage0_real_15_out,
        stage0_real_15_out_ap_vld,
        stage0_real_14_out,
        stage0_real_14_out_ap_vld,
        stage0_real_13_out,
        stage0_real_13_out_ap_vld,
        stage0_real_12_out,
        stage0_real_12_out_ap_vld,
        stage0_real_11_out,
        stage0_real_11_out_ap_vld,
        stage0_real_10_out,
        stage0_real_10_out_ap_vld,
        stage0_real_9_out,
        stage0_real_9_out_ap_vld,
        stage0_real_8_out,
        stage0_real_8_out_ap_vld,
        stage0_real_7_out,
        stage0_real_7_out_ap_vld,
        stage0_real_6_out,
        stage0_real_6_out_ap_vld,
        stage0_real_5_out,
        stage0_real_5_out_ap_vld,
        stage0_real_4_out,
        stage0_real_4_out_ap_vld,
        stage0_real_3_out,
        stage0_real_3_out_ap_vld,
        stage0_real_2_out,
        stage0_real_2_out_ap_vld,
        stage0_real_1_out,
        stage0_real_1_out_ap_vld,
        stage0_real_out,
        stage0_real_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_real_reload;
input  [15:0] data_real_1_reload;
input  [15:0] data_real_2_reload;
input  [15:0] data_real_3_reload;
input  [15:0] data_real_4_reload;
input  [15:0] data_real_5_reload;
input  [15:0] data_real_6_reload;
input  [15:0] data_real_7_reload;
input  [15:0] data_real_8_reload;
input  [15:0] data_real_9_reload;
input  [15:0] data_real_10_reload;
input  [15:0] data_real_11_reload;
input  [15:0] data_real_12_reload;
input  [15:0] data_real_13_reload;
input  [15:0] data_real_14_reload;
input  [15:0] data_real_15_reload;
input  [15:0] data_real_16_reload;
input  [15:0] data_real_17_reload;
input  [15:0] data_real_18_reload;
input  [15:0] data_real_19_reload;
input  [15:0] data_real_20_reload;
input  [15:0] data_real_21_reload;
input  [15:0] data_real_22_reload;
input  [15:0] data_real_23_reload;
input  [15:0] data_real_24_reload;
input  [15:0] data_real_25_reload;
input  [15:0] data_real_26_reload;
input  [15:0] data_real_27_reload;
input  [15:0] data_real_28_reload;
input  [15:0] data_real_29_reload;
input  [15:0] data_real_30_reload;
input  [15:0] data_real_31_reload;
input  [15:0] data_imag_reload;
input  [15:0] data_imag_1_reload;
input  [15:0] data_imag_2_reload;
input  [15:0] data_imag_3_reload;
input  [15:0] data_imag_4_reload;
input  [15:0] data_imag_5_reload;
input  [15:0] data_imag_6_reload;
input  [15:0] data_imag_7_reload;
input  [15:0] data_imag_8_reload;
input  [15:0] data_imag_9_reload;
input  [15:0] data_imag_10_reload;
input  [15:0] data_imag_11_reload;
input  [15:0] data_imag_12_reload;
input  [15:0] data_imag_13_reload;
input  [15:0] data_imag_14_reload;
input  [15:0] data_imag_15_reload;
input  [15:0] data_imag_16_reload;
input  [15:0] data_imag_17_reload;
input  [15:0] data_imag_18_reload;
input  [15:0] data_imag_19_reload;
input  [15:0] data_imag_20_reload;
input  [15:0] data_imag_21_reload;
input  [15:0] data_imag_22_reload;
input  [15:0] data_imag_23_reload;
input  [15:0] data_imag_24_reload;
input  [15:0] data_imag_25_reload;
input  [15:0] data_imag_26_reload;
input  [15:0] data_imag_27_reload;
input  [15:0] data_imag_28_reload;
input  [15:0] data_imag_29_reload;
input  [15:0] data_imag_30_reload;
input  [15:0] data_imag_31_reload;
output  [15:0] stage0_imag_31_out;
output   stage0_imag_31_out_ap_vld;
output  [15:0] stage0_imag_30_out;
output   stage0_imag_30_out_ap_vld;
output  [15:0] stage0_imag_29_out;
output   stage0_imag_29_out_ap_vld;
output  [15:0] stage0_imag_28_out;
output   stage0_imag_28_out_ap_vld;
output  [15:0] stage0_imag_27_out;
output   stage0_imag_27_out_ap_vld;
output  [15:0] stage0_imag_26_out;
output   stage0_imag_26_out_ap_vld;
output  [15:0] stage0_imag_25_out;
output   stage0_imag_25_out_ap_vld;
output  [15:0] stage0_imag_24_out;
output   stage0_imag_24_out_ap_vld;
output  [15:0] stage0_imag_23_out;
output   stage0_imag_23_out_ap_vld;
output  [15:0] stage0_imag_22_out;
output   stage0_imag_22_out_ap_vld;
output  [15:0] stage0_imag_21_out;
output   stage0_imag_21_out_ap_vld;
output  [15:0] stage0_imag_20_out;
output   stage0_imag_20_out_ap_vld;
output  [15:0] stage0_imag_19_out;
output   stage0_imag_19_out_ap_vld;
output  [15:0] stage0_imag_18_out;
output   stage0_imag_18_out_ap_vld;
output  [15:0] stage0_imag_17_out;
output   stage0_imag_17_out_ap_vld;
output  [15:0] stage0_imag_16_out;
output   stage0_imag_16_out_ap_vld;
output  [15:0] stage0_imag_15_out;
output   stage0_imag_15_out_ap_vld;
output  [15:0] stage0_imag_14_out;
output   stage0_imag_14_out_ap_vld;
output  [15:0] stage0_imag_13_out;
output   stage0_imag_13_out_ap_vld;
output  [15:0] stage0_imag_12_out;
output   stage0_imag_12_out_ap_vld;
output  [15:0] stage0_imag_11_out;
output   stage0_imag_11_out_ap_vld;
output  [15:0] stage0_imag_10_out;
output   stage0_imag_10_out_ap_vld;
output  [15:0] stage0_imag_9_out;
output   stage0_imag_9_out_ap_vld;
output  [15:0] stage0_imag_8_out;
output   stage0_imag_8_out_ap_vld;
output  [15:0] stage0_imag_7_out;
output   stage0_imag_7_out_ap_vld;
output  [15:0] stage0_imag_6_out;
output   stage0_imag_6_out_ap_vld;
output  [15:0] stage0_imag_5_out;
output   stage0_imag_5_out_ap_vld;
output  [15:0] stage0_imag_4_out;
output   stage0_imag_4_out_ap_vld;
output  [15:0] stage0_imag_3_out;
output   stage0_imag_3_out_ap_vld;
output  [15:0] stage0_imag_2_out;
output   stage0_imag_2_out_ap_vld;
output  [15:0] stage0_imag_1_out;
output   stage0_imag_1_out_ap_vld;
output  [15:0] stage0_imag_out;
output   stage0_imag_out_ap_vld;
output  [15:0] stage0_real_31_out;
output   stage0_real_31_out_ap_vld;
output  [15:0] stage0_real_30_out;
output   stage0_real_30_out_ap_vld;
output  [15:0] stage0_real_29_out;
output   stage0_real_29_out_ap_vld;
output  [15:0] stage0_real_28_out;
output   stage0_real_28_out_ap_vld;
output  [15:0] stage0_real_27_out;
output   stage0_real_27_out_ap_vld;
output  [15:0] stage0_real_26_out;
output   stage0_real_26_out_ap_vld;
output  [15:0] stage0_real_25_out;
output   stage0_real_25_out_ap_vld;
output  [15:0] stage0_real_24_out;
output   stage0_real_24_out_ap_vld;
output  [15:0] stage0_real_23_out;
output   stage0_real_23_out_ap_vld;
output  [15:0] stage0_real_22_out;
output   stage0_real_22_out_ap_vld;
output  [15:0] stage0_real_21_out;
output   stage0_real_21_out_ap_vld;
output  [15:0] stage0_real_20_out;
output   stage0_real_20_out_ap_vld;
output  [15:0] stage0_real_19_out;
output   stage0_real_19_out_ap_vld;
output  [15:0] stage0_real_18_out;
output   stage0_real_18_out_ap_vld;
output  [15:0] stage0_real_17_out;
output   stage0_real_17_out_ap_vld;
output  [15:0] stage0_real_16_out;
output   stage0_real_16_out_ap_vld;
output  [15:0] stage0_real_15_out;
output   stage0_real_15_out_ap_vld;
output  [15:0] stage0_real_14_out;
output   stage0_real_14_out_ap_vld;
output  [15:0] stage0_real_13_out;
output   stage0_real_13_out_ap_vld;
output  [15:0] stage0_real_12_out;
output   stage0_real_12_out_ap_vld;
output  [15:0] stage0_real_11_out;
output   stage0_real_11_out_ap_vld;
output  [15:0] stage0_real_10_out;
output   stage0_real_10_out_ap_vld;
output  [15:0] stage0_real_9_out;
output   stage0_real_9_out_ap_vld;
output  [15:0] stage0_real_8_out;
output   stage0_real_8_out_ap_vld;
output  [15:0] stage0_real_7_out;
output   stage0_real_7_out_ap_vld;
output  [15:0] stage0_real_6_out;
output   stage0_real_6_out_ap_vld;
output  [15:0] stage0_real_5_out;
output   stage0_real_5_out_ap_vld;
output  [15:0] stage0_real_4_out;
output   stage0_real_4_out_ap_vld;
output  [15:0] stage0_real_3_out;
output   stage0_real_3_out_ap_vld;
output  [15:0] stage0_real_2_out;
output   stage0_real_2_out_ap_vld;
output  [15:0] stage0_real_1_out;
output   stage0_real_1_out_ap_vld;
output  [15:0] stage0_real_out;
output   stage0_real_out_ap_vld;

reg ap_idle;
reg stage0_imag_31_out_ap_vld;
reg stage0_imag_30_out_ap_vld;
reg stage0_imag_29_out_ap_vld;
reg stage0_imag_28_out_ap_vld;
reg stage0_imag_27_out_ap_vld;
reg stage0_imag_26_out_ap_vld;
reg stage0_imag_25_out_ap_vld;
reg stage0_imag_24_out_ap_vld;
reg stage0_imag_23_out_ap_vld;
reg stage0_imag_22_out_ap_vld;
reg stage0_imag_21_out_ap_vld;
reg stage0_imag_20_out_ap_vld;
reg stage0_imag_19_out_ap_vld;
reg stage0_imag_18_out_ap_vld;
reg stage0_imag_17_out_ap_vld;
reg stage0_imag_16_out_ap_vld;
reg stage0_imag_15_out_ap_vld;
reg stage0_imag_14_out_ap_vld;
reg stage0_imag_13_out_ap_vld;
reg stage0_imag_12_out_ap_vld;
reg stage0_imag_11_out_ap_vld;
reg stage0_imag_10_out_ap_vld;
reg stage0_imag_9_out_ap_vld;
reg stage0_imag_8_out_ap_vld;
reg stage0_imag_7_out_ap_vld;
reg stage0_imag_6_out_ap_vld;
reg stage0_imag_5_out_ap_vld;
reg stage0_imag_4_out_ap_vld;
reg stage0_imag_3_out_ap_vld;
reg stage0_imag_2_out_ap_vld;
reg stage0_imag_1_out_ap_vld;
reg stage0_imag_out_ap_vld;
reg stage0_real_31_out_ap_vld;
reg stage0_real_30_out_ap_vld;
reg stage0_real_29_out_ap_vld;
reg stage0_real_28_out_ap_vld;
reg stage0_real_27_out_ap_vld;
reg stage0_real_26_out_ap_vld;
reg stage0_real_25_out_ap_vld;
reg stage0_real_24_out_ap_vld;
reg stage0_real_23_out_ap_vld;
reg stage0_real_22_out_ap_vld;
reg stage0_real_21_out_ap_vld;
reg stage0_real_20_out_ap_vld;
reg stage0_real_19_out_ap_vld;
reg stage0_real_18_out_ap_vld;
reg stage0_real_17_out_ap_vld;
reg stage0_real_16_out_ap_vld;
reg stage0_real_15_out_ap_vld;
reg stage0_real_14_out_ap_vld;
reg stage0_real_13_out_ap_vld;
reg stage0_real_12_out_ap_vld;
reg stage0_real_11_out_ap_vld;
reg stage0_real_10_out_ap_vld;
reg stage0_real_9_out_ap_vld;
reg stage0_real_8_out_ap_vld;
reg stage0_real_7_out_ap_vld;
reg stage0_real_6_out_ap_vld;
reg stage0_real_5_out_ap_vld;
reg stage0_real_4_out_ap_vld;
reg stage0_real_3_out_ap_vld;
reg stage0_real_2_out_ap_vld;
reg stage0_real_1_out_ap_vld;
reg stage0_real_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln84_fu_1774_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] i_1_fu_354;
wire   [5:0] add_ln84_fu_1780_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
reg   [15:0] stage0_real_fu_358;
wire   [15:0] stage0_real_56_fu_1800_p34;
wire   [4:0] trunc_ln56_fu_1786_p1;
reg   [15:0] stage0_real_1_fu_362;
reg   [15:0] stage0_real_2_fu_366;
reg   [15:0] stage0_real_3_fu_370;
reg   [15:0] stage0_real_4_fu_374;
reg   [15:0] stage0_real_5_fu_378;
reg   [15:0] stage0_real_6_fu_382;
reg   [15:0] stage0_real_7_fu_386;
reg   [15:0] stage0_real_8_fu_390;
reg   [15:0] stage0_real_9_fu_394;
reg   [15:0] stage0_real_10_fu_398;
reg   [15:0] stage0_real_11_fu_402;
reg   [15:0] stage0_real_12_fu_406;
reg   [15:0] stage0_real_13_fu_410;
reg   [15:0] stage0_real_14_fu_414;
reg   [15:0] stage0_real_15_fu_418;
reg   [15:0] stage0_real_16_fu_422;
reg   [15:0] stage0_real_17_fu_426;
reg   [15:0] stage0_real_18_fu_430;
reg   [15:0] stage0_real_19_fu_434;
reg   [15:0] stage0_real_20_fu_438;
reg   [15:0] stage0_real_21_fu_442;
reg   [15:0] stage0_real_22_fu_446;
reg   [15:0] stage0_real_23_fu_450;
reg   [15:0] stage0_real_24_fu_454;
reg   [15:0] stage0_real_25_fu_458;
reg   [15:0] stage0_real_26_fu_462;
reg   [15:0] stage0_real_27_fu_466;
reg   [15:0] stage0_real_28_fu_470;
reg   [15:0] stage0_real_29_fu_474;
reg   [15:0] stage0_real_30_fu_478;
reg   [15:0] stage0_real_31_fu_482;
reg   [15:0] stage0_imag_fu_486;
wire   [15:0] stage0_imag_56_fu_1870_p34;
reg   [15:0] stage0_imag_1_fu_490;
reg   [15:0] stage0_imag_2_fu_494;
reg   [15:0] stage0_imag_3_fu_498;
reg   [15:0] stage0_imag_4_fu_502;
reg   [15:0] stage0_imag_5_fu_506;
reg   [15:0] stage0_imag_6_fu_510;
reg   [15:0] stage0_imag_7_fu_514;
reg   [15:0] stage0_imag_8_fu_518;
reg   [15:0] stage0_imag_9_fu_522;
reg   [15:0] stage0_imag_10_fu_526;
reg   [15:0] stage0_imag_11_fu_530;
reg   [15:0] stage0_imag_12_fu_534;
reg   [15:0] stage0_imag_13_fu_538;
reg   [15:0] stage0_imag_14_fu_542;
reg   [15:0] stage0_imag_15_fu_546;
reg   [15:0] stage0_imag_16_fu_550;
reg   [15:0] stage0_imag_17_fu_554;
reg   [15:0] stage0_imag_18_fu_558;
reg   [15:0] stage0_imag_19_fu_562;
reg   [15:0] stage0_imag_20_fu_566;
reg   [15:0] stage0_imag_21_fu_570;
reg   [15:0] stage0_imag_22_fu_574;
reg   [15:0] stage0_imag_23_fu_578;
reg   [15:0] stage0_imag_24_fu_582;
reg   [15:0] stage0_imag_25_fu_586;
reg   [15:0] stage0_imag_26_fu_590;
reg   [15:0] stage0_imag_27_fu_594;
reg   [15:0] stage0_imag_28_fu_598;
reg   [15:0] stage0_imag_29_fu_602;
reg   [15:0] stage0_imag_30_fu_606;
reg   [15:0] stage0_imag_31_fu_610;
reg   [4:0] or_ln_fu_1790_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

fft32_mux_32_5_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_32_5_16_1_1_U66(
    .din0(data_real_reload),
    .din1(data_real_1_reload),
    .din2(data_real_2_reload),
    .din3(data_real_3_reload),
    .din4(data_real_4_reload),
    .din5(data_real_5_reload),
    .din6(data_real_6_reload),
    .din7(data_real_7_reload),
    .din8(data_real_8_reload),
    .din9(data_real_9_reload),
    .din10(data_real_10_reload),
    .din11(data_real_11_reload),
    .din12(data_real_12_reload),
    .din13(data_real_13_reload),
    .din14(data_real_14_reload),
    .din15(data_real_15_reload),
    .din16(data_real_16_reload),
    .din17(data_real_17_reload),
    .din18(data_real_18_reload),
    .din19(data_real_19_reload),
    .din20(data_real_20_reload),
    .din21(data_real_21_reload),
    .din22(data_real_22_reload),
    .din23(data_real_23_reload),
    .din24(data_real_24_reload),
    .din25(data_real_25_reload),
    .din26(data_real_26_reload),
    .din27(data_real_27_reload),
    .din28(data_real_28_reload),
    .din29(data_real_29_reload),
    .din30(data_real_30_reload),
    .din31(data_real_31_reload),
    .din32(or_ln_fu_1790_p4),
    .dout(stage0_real_56_fu_1800_p34)
);

fft32_mux_32_5_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
mux_32_5_16_1_1_U67(
    .din0(data_imag_reload),
    .din1(data_imag_1_reload),
    .din2(data_imag_2_reload),
    .din3(data_imag_3_reload),
    .din4(data_imag_4_reload),
    .din5(data_imag_5_reload),
    .din6(data_imag_6_reload),
    .din7(data_imag_7_reload),
    .din8(data_imag_8_reload),
    .din9(data_imag_9_reload),
    .din10(data_imag_10_reload),
    .din11(data_imag_11_reload),
    .din12(data_imag_12_reload),
    .din13(data_imag_13_reload),
    .din14(data_imag_14_reload),
    .din15(data_imag_15_reload),
    .din16(data_imag_16_reload),
    .din17(data_imag_17_reload),
    .din18(data_imag_18_reload),
    .din19(data_imag_19_reload),
    .din20(data_imag_20_reload),
    .din21(data_imag_21_reload),
    .din22(data_imag_22_reload),
    .din23(data_imag_23_reload),
    .din24(data_imag_24_reload),
    .din25(data_imag_25_reload),
    .din26(data_imag_26_reload),
    .din27(data_imag_27_reload),
    .din28(data_imag_28_reload),
    .din29(data_imag_29_reload),
    .din30(data_imag_30_reload),
    .din31(data_imag_31_reload),
    .din32(or_ln_fu_1790_p4),
    .dout(stage0_imag_56_fu_1870_p34)
);

fft32_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln84_fu_1774_p2 == 1'd0)) begin
            i_1_fu_354 <= add_ln84_fu_1780_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_354 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd10))) begin
            stage0_imag_10_fu_526 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_10_fu_526 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd11))) begin
            stage0_imag_11_fu_530 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_11_fu_530 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd12))) begin
            stage0_imag_12_fu_534 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_12_fu_534 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd13))) begin
            stage0_imag_13_fu_538 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_13_fu_538 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd14))) begin
            stage0_imag_14_fu_542 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_14_fu_542 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd15))) begin
            stage0_imag_15_fu_546 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_15_fu_546 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd16))) begin
            stage0_imag_16_fu_550 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_16_fu_550 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd17))) begin
            stage0_imag_17_fu_554 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_17_fu_554 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd18))) begin
            stage0_imag_18_fu_558 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_18_fu_558 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd19))) begin
            stage0_imag_19_fu_562 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_19_fu_562 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd1))) begin
            stage0_imag_1_fu_490 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_1_fu_490 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd20))) begin
            stage0_imag_20_fu_566 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_20_fu_566 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd21))) begin
            stage0_imag_21_fu_570 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_21_fu_570 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd22))) begin
            stage0_imag_22_fu_574 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_22_fu_574 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd23))) begin
            stage0_imag_23_fu_578 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_23_fu_578 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd24))) begin
            stage0_imag_24_fu_582 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_24_fu_582 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd25))) begin
            stage0_imag_25_fu_586 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_25_fu_586 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd26))) begin
            stage0_imag_26_fu_590 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_26_fu_590 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd27))) begin
            stage0_imag_27_fu_594 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_27_fu_594 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd28))) begin
            stage0_imag_28_fu_598 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_28_fu_598 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd29))) begin
            stage0_imag_29_fu_602 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_29_fu_602 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd2))) begin
            stage0_imag_2_fu_494 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_2_fu_494 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd30))) begin
            stage0_imag_30_fu_606 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_30_fu_606 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd31))) begin
            stage0_imag_31_fu_610 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_31_fu_610 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd3))) begin
            stage0_imag_3_fu_498 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_3_fu_498 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd4))) begin
            stage0_imag_4_fu_502 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_4_fu_502 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd5))) begin
            stage0_imag_5_fu_506 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_5_fu_506 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd6))) begin
            stage0_imag_6_fu_510 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_6_fu_510 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd7))) begin
            stage0_imag_7_fu_514 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_7_fu_514 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd8))) begin
            stage0_imag_8_fu_518 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_8_fu_518 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd9))) begin
            stage0_imag_9_fu_522 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_9_fu_522 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd0))) begin
            stage0_imag_fu_486 <= stage0_imag_56_fu_1870_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_imag_fu_486 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd10))) begin
            stage0_real_10_fu_398 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_10_fu_398 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd11))) begin
            stage0_real_11_fu_402 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_11_fu_402 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd12))) begin
            stage0_real_12_fu_406 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_12_fu_406 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd13))) begin
            stage0_real_13_fu_410 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_13_fu_410 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd14))) begin
            stage0_real_14_fu_414 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_14_fu_414 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd15))) begin
            stage0_real_15_fu_418 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_15_fu_418 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd16))) begin
            stage0_real_16_fu_422 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_16_fu_422 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd17))) begin
            stage0_real_17_fu_426 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_17_fu_426 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd18))) begin
            stage0_real_18_fu_430 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_18_fu_430 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd19))) begin
            stage0_real_19_fu_434 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_19_fu_434 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd1))) begin
            stage0_real_1_fu_362 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_1_fu_362 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd20))) begin
            stage0_real_20_fu_438 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_20_fu_438 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd21))) begin
            stage0_real_21_fu_442 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_21_fu_442 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd22))) begin
            stage0_real_22_fu_446 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_22_fu_446 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd23))) begin
            stage0_real_23_fu_450 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_23_fu_450 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd24))) begin
            stage0_real_24_fu_454 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_24_fu_454 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd25))) begin
            stage0_real_25_fu_458 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_25_fu_458 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd26))) begin
            stage0_real_26_fu_462 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_26_fu_462 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd27))) begin
            stage0_real_27_fu_466 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_27_fu_466 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd28))) begin
            stage0_real_28_fu_470 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_28_fu_470 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd29))) begin
            stage0_real_29_fu_474 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_29_fu_474 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd2))) begin
            stage0_real_2_fu_366 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_2_fu_366 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd30))) begin
            stage0_real_30_fu_478 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_30_fu_478 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd31))) begin
            stage0_real_31_fu_482 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_31_fu_482 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd3))) begin
            stage0_real_3_fu_370 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_3_fu_370 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd4))) begin
            stage0_real_4_fu_374 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_4_fu_374 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd5))) begin
            stage0_real_5_fu_378 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_5_fu_378 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd6))) begin
            stage0_real_6_fu_382 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_6_fu_382 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd7))) begin
            stage0_real_7_fu_386 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_7_fu_386 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd8))) begin
            stage0_real_8_fu_390 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_8_fu_390 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd9))) begin
            stage0_real_9_fu_394 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_9_fu_394 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((icmp_ln84_fu_1774_p2 == 1'd0) & (trunc_ln56_fu_1786_p1 == 5'd0))) begin
            stage0_real_fu_358 <= stage0_real_56_fu_1800_p34;
        end else if ((ap_loop_init == 1'b1)) begin
            stage0_real_fu_358 <= 16'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_354;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_10_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_11_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_12_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_13_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_14_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_15_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_16_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_17_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_18_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_19_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_1_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_20_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_21_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_22_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_23_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_24_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_24_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_25_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_25_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_26_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_26_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_27_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_27_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_28_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_29_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_29_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_2_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_30_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_30_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_31_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_3_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_4_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_5_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_6_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_7_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_8_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_9_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_imag_out_ap_vld = 1'b1;
    end else begin
        stage0_imag_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_10_out_ap_vld = 1'b1;
    end else begin
        stage0_real_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_11_out_ap_vld = 1'b1;
    end else begin
        stage0_real_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_12_out_ap_vld = 1'b1;
    end else begin
        stage0_real_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_13_out_ap_vld = 1'b1;
    end else begin
        stage0_real_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_14_out_ap_vld = 1'b1;
    end else begin
        stage0_real_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_15_out_ap_vld = 1'b1;
    end else begin
        stage0_real_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_16_out_ap_vld = 1'b1;
    end else begin
        stage0_real_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_17_out_ap_vld = 1'b1;
    end else begin
        stage0_real_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_18_out_ap_vld = 1'b1;
    end else begin
        stage0_real_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_19_out_ap_vld = 1'b1;
    end else begin
        stage0_real_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_1_out_ap_vld = 1'b1;
    end else begin
        stage0_real_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_20_out_ap_vld = 1'b1;
    end else begin
        stage0_real_20_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_21_out_ap_vld = 1'b1;
    end else begin
        stage0_real_21_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_22_out_ap_vld = 1'b1;
    end else begin
        stage0_real_22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_23_out_ap_vld = 1'b1;
    end else begin
        stage0_real_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_24_out_ap_vld = 1'b1;
    end else begin
        stage0_real_24_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_25_out_ap_vld = 1'b1;
    end else begin
        stage0_real_25_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_26_out_ap_vld = 1'b1;
    end else begin
        stage0_real_26_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_27_out_ap_vld = 1'b1;
    end else begin
        stage0_real_27_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_28_out_ap_vld = 1'b1;
    end else begin
        stage0_real_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_29_out_ap_vld = 1'b1;
    end else begin
        stage0_real_29_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_2_out_ap_vld = 1'b1;
    end else begin
        stage0_real_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_30_out_ap_vld = 1'b1;
    end else begin
        stage0_real_30_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_31_out_ap_vld = 1'b1;
    end else begin
        stage0_real_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_3_out_ap_vld = 1'b1;
    end else begin
        stage0_real_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_4_out_ap_vld = 1'b1;
    end else begin
        stage0_real_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_5_out_ap_vld = 1'b1;
    end else begin
        stage0_real_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_6_out_ap_vld = 1'b1;
    end else begin
        stage0_real_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_7_out_ap_vld = 1'b1;
    end else begin
        stage0_real_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_8_out_ap_vld = 1'b1;
    end else begin
        stage0_real_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_9_out_ap_vld = 1'b1;
    end else begin
        stage0_real_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln84_fu_1774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        stage0_real_out_ap_vld = 1'b1;
    end else begin
        stage0_real_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_fu_1780_p2 = (ap_sig_allocacmp_i + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln84_fu_1774_p2 = ((ap_sig_allocacmp_i == 6'd32) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_i) begin
    for (ap_tvar_int_0 = 5 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 4 - 0) begin
            or_ln_fu_1790_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln_fu_1790_p4[ap_tvar_int_0] = ap_sig_allocacmp_i[4 - ap_tvar_int_0];
        end
    end
end

assign stage0_imag_10_out = stage0_imag_10_fu_526;

assign stage0_imag_11_out = stage0_imag_11_fu_530;

assign stage0_imag_12_out = stage0_imag_12_fu_534;

assign stage0_imag_13_out = stage0_imag_13_fu_538;

assign stage0_imag_14_out = stage0_imag_14_fu_542;

assign stage0_imag_15_out = stage0_imag_15_fu_546;

assign stage0_imag_16_out = stage0_imag_16_fu_550;

assign stage0_imag_17_out = stage0_imag_17_fu_554;

assign stage0_imag_18_out = stage0_imag_18_fu_558;

assign stage0_imag_19_out = stage0_imag_19_fu_562;

assign stage0_imag_1_out = stage0_imag_1_fu_490;

assign stage0_imag_20_out = stage0_imag_20_fu_566;

assign stage0_imag_21_out = stage0_imag_21_fu_570;

assign stage0_imag_22_out = stage0_imag_22_fu_574;

assign stage0_imag_23_out = stage0_imag_23_fu_578;

assign stage0_imag_24_out = stage0_imag_24_fu_582;

assign stage0_imag_25_out = stage0_imag_25_fu_586;

assign stage0_imag_26_out = stage0_imag_26_fu_590;

assign stage0_imag_27_out = stage0_imag_27_fu_594;

assign stage0_imag_28_out = stage0_imag_28_fu_598;

assign stage0_imag_29_out = stage0_imag_29_fu_602;

assign stage0_imag_2_out = stage0_imag_2_fu_494;

assign stage0_imag_30_out = stage0_imag_30_fu_606;

assign stage0_imag_31_out = stage0_imag_31_fu_610;

assign stage0_imag_3_out = stage0_imag_3_fu_498;

assign stage0_imag_4_out = stage0_imag_4_fu_502;

assign stage0_imag_5_out = stage0_imag_5_fu_506;

assign stage0_imag_6_out = stage0_imag_6_fu_510;

assign stage0_imag_7_out = stage0_imag_7_fu_514;

assign stage0_imag_8_out = stage0_imag_8_fu_518;

assign stage0_imag_9_out = stage0_imag_9_fu_522;

assign stage0_imag_out = stage0_imag_fu_486;

assign stage0_real_10_out = stage0_real_10_fu_398;

assign stage0_real_11_out = stage0_real_11_fu_402;

assign stage0_real_12_out = stage0_real_12_fu_406;

assign stage0_real_13_out = stage0_real_13_fu_410;

assign stage0_real_14_out = stage0_real_14_fu_414;

assign stage0_real_15_out = stage0_real_15_fu_418;

assign stage0_real_16_out = stage0_real_16_fu_422;

assign stage0_real_17_out = stage0_real_17_fu_426;

assign stage0_real_18_out = stage0_real_18_fu_430;

assign stage0_real_19_out = stage0_real_19_fu_434;

assign stage0_real_1_out = stage0_real_1_fu_362;

assign stage0_real_20_out = stage0_real_20_fu_438;

assign stage0_real_21_out = stage0_real_21_fu_442;

assign stage0_real_22_out = stage0_real_22_fu_446;

assign stage0_real_23_out = stage0_real_23_fu_450;

assign stage0_real_24_out = stage0_real_24_fu_454;

assign stage0_real_25_out = stage0_real_25_fu_458;

assign stage0_real_26_out = stage0_real_26_fu_462;

assign stage0_real_27_out = stage0_real_27_fu_466;

assign stage0_real_28_out = stage0_real_28_fu_470;

assign stage0_real_29_out = stage0_real_29_fu_474;

assign stage0_real_2_out = stage0_real_2_fu_366;

assign stage0_real_30_out = stage0_real_30_fu_478;

assign stage0_real_31_out = stage0_real_31_fu_482;

assign stage0_real_3_out = stage0_real_3_fu_370;

assign stage0_real_4_out = stage0_real_4_fu_374;

assign stage0_real_5_out = stage0_real_5_fu_378;

assign stage0_real_6_out = stage0_real_6_fu_382;

assign stage0_real_7_out = stage0_real_7_fu_386;

assign stage0_real_8_out = stage0_real_8_fu_390;

assign stage0_real_9_out = stage0_real_9_fu_394;

assign stage0_real_out = stage0_real_fu_358;

assign trunc_ln56_fu_1786_p1 = ap_sig_allocacmp_i[4:0];

endmodule //fft32_fft32_Pipeline_bit_rev_assign_loop
