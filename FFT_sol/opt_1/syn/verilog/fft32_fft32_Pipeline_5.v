// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_fft32_Pipeline_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_imag_3_2,
        w_imag_2_2,
        w_imag_1_2,
        w_real_3_2,
        w_real_2_2,
        w_real_1_2,
        select_ln18_6_out,
        select_ln18_6_out_ap_vld,
        select_ln18_7_out,
        select_ln18_7_out_ap_vld,
        select_ln18_8_out,
        select_ln18_8_out_ap_vld,
        select_ln18_9_out,
        select_ln18_9_out_ap_vld,
        select_ln18_10_out,
        select_ln18_10_out_ap_vld,
        select_ln18_11_out,
        select_ln18_11_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] w_imag_3_2;
input  [15:0] w_imag_2_2;
input  [15:0] w_imag_1_2;
input  [15:0] w_real_3_2;
input  [15:0] w_real_2_2;
input  [15:0] w_real_1_2;
output  [15:0] select_ln18_6_out;
output   select_ln18_6_out_ap_vld;
output  [15:0] select_ln18_7_out;
output   select_ln18_7_out_ap_vld;
output  [15:0] select_ln18_8_out;
output   select_ln18_8_out_ap_vld;
output  [15:0] select_ln18_9_out;
output   select_ln18_9_out_ap_vld;
output  [15:0] select_ln18_10_out;
output   select_ln18_10_out_ap_vld;
output  [15:0] select_ln18_11_out;
output   select_ln18_11_out_ap_vld;

reg ap_idle;
reg select_ln18_6_out_ap_vld;
reg select_ln18_7_out_ap_vld;
reg select_ln18_8_out_ap_vld;
reg select_ln18_9_out_ap_vld;
reg select_ln18_10_out_ap_vld;
reg select_ln18_11_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln114_fu_196_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [15:0] select_ln18_7_fu_164_p3;
wire   [15:0] select_ln18_8_fu_172_p3;
wire   [15:0] select_ln18_10_fu_180_p3;
wire   [15:0] select_ln18_11_fu_188_p3;
reg   [1:0] phi_ln114_1_fu_50;
wire   [1:0] add_ln114_fu_146_p2;
wire    ap_loop_init;
reg   [15:0] w_real_1_4_fu_54;
reg   [15:0] w_real_2_4_fu_58;
reg   [15:0] w_imag_1_4_fu_62;
reg   [15:0] w_imag_2_4_fu_66;
wire   [0:0] icmp_ln18_fu_158_p2;
wire   [0:0] icmp_ln18_4_fu_152_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft32_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_ln114_1_fu_50 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            phi_ln114_1_fu_50 <= add_ln114_fu_146_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_imag_1_4_fu_62 <= w_imag_1_2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w_imag_1_4_fu_62 <= select_ln18_11_fu_188_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_imag_2_4_fu_66 <= w_imag_2_2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w_imag_2_4_fu_66 <= select_ln18_10_fu_180_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_real_1_4_fu_54 <= w_real_1_2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w_real_1_4_fu_54 <= select_ln18_8_fu_172_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_real_2_4_fu_58 <= w_real_2_2;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            w_real_2_4_fu_58 <= select_ln18_7_fu_164_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_10_out_ap_vld = 1'b1;
    end else begin
        select_ln18_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_11_out_ap_vld = 1'b1;
    end else begin
        select_ln18_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_6_out_ap_vld = 1'b1;
    end else begin
        select_ln18_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_7_out_ap_vld = 1'b1;
    end else begin
        select_ln18_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_8_out_ap_vld = 1'b1;
    end else begin
        select_ln18_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_9_out_ap_vld = 1'b1;
    end else begin
        select_ln18_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_146_p2 = (phi_ln114_1_fu_50 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln114_fu_196_p2 = ((phi_ln114_1_fu_50 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_4_fu_152_p2 = ((phi_ln114_1_fu_50 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_158_p2 = ((phi_ln114_1_fu_50 == 2'd2) ? 1'b1 : 1'b0);

assign select_ln18_10_fu_180_p3 = ((icmp_ln18_fu_158_p2[0:0] == 1'b1) ? 16'd0 : w_imag_2_4_fu_66);

assign select_ln18_10_out = ((icmp_ln18_fu_158_p2[0:0] == 1'b1) ? 16'd0 : w_imag_2_4_fu_66);

assign select_ln18_11_fu_188_p3 = ((icmp_ln18_4_fu_152_p2[0:0] == 1'b1) ? 16'd0 : w_imag_1_4_fu_62);

assign select_ln18_11_out = ((icmp_ln18_4_fu_152_p2[0:0] == 1'b1) ? 16'd0 : w_imag_1_4_fu_62);

assign select_ln18_6_out = 16'd0;

assign select_ln18_7_fu_164_p3 = ((icmp_ln18_fu_158_p2[0:0] == 1'b1) ? 16'd0 : w_real_2_4_fu_58);

assign select_ln18_7_out = ((icmp_ln18_fu_158_p2[0:0] == 1'b1) ? 16'd0 : w_real_2_4_fu_58);

assign select_ln18_8_fu_172_p3 = ((icmp_ln18_4_fu_152_p2[0:0] == 1'b1) ? 16'd0 : w_real_1_4_fu_54);

assign select_ln18_8_out = ((icmp_ln18_4_fu_152_p2[0:0] == 1'b1) ? 16'd0 : w_real_1_4_fu_54);

assign select_ln18_9_out = 16'd0;

endmodule //fft32_fft32_Pipeline_5
