-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    in_stream_empty_n : IN STD_LOGIC;
    in_stream_read : OUT STD_LOGIC;
    out_stream_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    out_stream_full_n : IN STD_LOGIC;
    out_stream_write : OUT STD_LOGIC );
end;


architecture behav of fft32 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft32_fft32,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030-sbv485-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.886540,HLS_SYN_LAT=2704,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2763,HLS_SYN_LUT=6112,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (81 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (81 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (81 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (81 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (81 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (81 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (81 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (81 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (81 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (81 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv64_C01921FB54442D18 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010110100011000";
    constant ap_const_lv64_3FA0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FF4 : STD_LOGIC_VECTOR (11 downto 0) := "111111110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal stage1_real_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_588 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal stage1_real_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal stage1_imag_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_imag_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_2_fu_612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_2_reg_1806 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal group_cast_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln107_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln120_fu_686_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln120_reg_1862 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln118_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_1_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln118_fu_695_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln118_reg_1873 : STD_LOGIC_VECTOR (2 downto 0);
    signal base_fu_704_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_reg_1878 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln127_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_reg_1885 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_1901 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal bitcast_ln724_1_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_1_reg_1906 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal select_ln120_fu_810_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln120_reg_1911 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln120_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_1916 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_1_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_1_reg_1923 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_1_fu_848_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln120_1_reg_1928 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln120_2_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_2_reg_1934 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_9_fu_862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_9_reg_1940 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln120_4_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_4_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_18_fu_981_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_18_reg_1951 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal w_real_3_fu_1009_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal w_real_3_7_fu_1017_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_3_8_fu_1025_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_fu_1037_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_7_fu_1045_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_8_fu_1053_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln128_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_reg_1986 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_reg_2002 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln10_4_fu_1083_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_6_fu_1091_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_7_fu_1095_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_2_fu_1099_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_2_reg_2034 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_2_fu_1105_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_2_reg_2039 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_8_fu_1111_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_8_reg_2044 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_10_fu_1115_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_10_reg_2050 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_11_fu_1119_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_real_3_load_reg_2062 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_12_fu_1123_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_12_reg_2067 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_14_fu_1127_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_14_reg_2073 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_15_fu_1131_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_4_fu_1139_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_4_reg_2085 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal mul_ln11_4_fu_1144_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_4_reg_2090 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_6_fu_1152_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_6_reg_2095 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_6_fu_1157_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_6_reg_2100 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln126_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_reg_2105 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal r_real_7_reg_2121 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_7_reg_2127 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_8_reg_2133 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_8_reg_2139 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_9_reg_2145 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_9_reg_2151 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_11_fu_1285_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_11_reg_2157 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal r_imag_11_fu_1291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_11_reg_2162 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_12_fu_1297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_12_reg_2167 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_12_fu_1303_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_12_reg_2172 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_2_reg_2177 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal zext_ln143_1_fu_1334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln141_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_real_reg_2190 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_imag_reg_2195 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln724_fu_1344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_reg_2200 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal select_ln143_fu_1396_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln143_reg_2205 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln143_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_reg_2210 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_1_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_1_reg_2217 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln143_1_fu_1434_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln143_1_reg_2222 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln143_2_fu_1442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_2_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_fu_1448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_reg_2234 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln143_4_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_4_reg_2240 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_19_fu_1567_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_19_reg_2245 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal b_real_reg_2250 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal b_imag_reg_2255 : STD_LOGIC_VECTOR (4 downto 0);
    signal outcos_reg_2260 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal sext_ln10_fu_1586_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_reg_2265 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_2_fu_1590_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_2_reg_2271 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_3_fu_1594_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_fu_1601_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_reg_2283 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal mul_ln11_1_fu_1606_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_1_reg_2288 : STD_LOGIC_VECTOR (27 downto 0);
    signal data_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_real_ce0 : STD_LOGIC;
    signal data_real_we0 : STD_LOGIC;
    signal data_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_real_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_imag_ce0 : STD_LOGIC;
    signal data_imag_we0 : STD_LOGIC;
    signal data_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_imag_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage0_real_ce0 : STD_LOGIC;
    signal stage0_real_we0 : STD_LOGIC;
    signal stage0_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_real_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_real_ce1 : STD_LOGIC;
    signal stage0_real_we1 : STD_LOGIC;
    signal stage0_real_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage0_imag_ce0 : STD_LOGIC;
    signal stage0_imag_we0 : STD_LOGIC;
    signal stage0_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_imag_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_imag_ce1 : STD_LOGIC;
    signal stage0_imag_we1 : STD_LOGIC;
    signal stage0_imag_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage1_real_ce0 : STD_LOGIC;
    signal stage1_real_we0 : STD_LOGIC;
    signal stage1_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage1_real_ce1 : STD_LOGIC;
    signal stage1_real_we1 : STD_LOGIC;
    signal stage1_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage1_imag_ce0 : STD_LOGIC;
    signal stage1_imag_we0 : STD_LOGIC;
    signal stage1_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage1_imag_ce1 : STD_LOGIC;
    signal stage1_imag_we1 : STD_LOGIC;
    signal stage2_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage2_real_ce0 : STD_LOGIC;
    signal stage2_real_we0 : STD_LOGIC;
    signal stage2_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_real_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage2_real_ce1 : STD_LOGIC;
    signal stage2_real_we1 : STD_LOGIC;
    signal stage2_real_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_real_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage2_imag_ce0 : STD_LOGIC;
    signal stage2_imag_we0 : STD_LOGIC;
    signal stage2_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_imag_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage2_imag_ce1 : STD_LOGIC;
    signal stage2_imag_we1 : STD_LOGIC;
    signal stage2_imag_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage2_imag_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_1_fu_479_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_data_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_1_fu_479_data_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_data_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_data_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_1_fu_479_data_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_1_fu_479_data_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_data_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_1_fu_479_data_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_input_loop_fu_487_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_in_stream_read : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_data_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_input_loop_fu_487_data_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_data_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_data_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_input_loop_fu_487_data_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_input_loop_fu_487_data_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_data_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_input_loop_fu_487_data_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_3_fu_495_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_stage0_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_3_fu_495_stage0_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_stage0_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_stage0_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_3_fu_495_stage0_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_3_fu_495_stage0_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_stage0_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_3_fu_495_stage0_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_5_fu_501_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_stage1_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_5_fu_501_stage1_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_stage1_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_stage1_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_5_fu_501_stage1_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_5_fu_501_stage1_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_stage1_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_5_fu_501_stage1_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_7_fu_507_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_stage2_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_7_fu_507_stage2_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_stage2_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_stage2_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_7_fu_507_stage2_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_7_fu_507_stage2_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_stage2_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_7_fu_507_stage2_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we0 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we1 : STD_LOGIC;
    signal grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_out_ap_vld : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_1_out_ap_vld : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_2_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_2_out_ap_vld : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_3_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_3_out_ap_vld : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_4_out_ap_vld : STD_LOGIC;
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_5_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fft32_Pipeline_8_fu_529_select_ln18_5_out_ap_vld : STD_LOGIC;
    signal grp_generic_sincos_16_4_s_fu_545_ap_start : STD_LOGIC;
    signal grp_generic_sincos_16_4_s_fu_545_ap_done : STD_LOGIC;
    signal grp_generic_sincos_16_4_s_fu_545_ap_idle : STD_LOGIC;
    signal grp_generic_sincos_16_4_s_fu_545_ap_ready : STD_LOGIC;
    signal grp_generic_sincos_16_4_s_fu_545_in_val : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_generic_sincos_16_4_s_fu_545_ap_return_0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_generic_sincos_16_4_s_fu_545_ap_return_1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft32_Pipeline_output_loop_fu_552_ap_start : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_ap_done : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_ap_idle : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_ap_ready : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_out_stream_din : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fft32_Pipeline_output_loop_fu_552_out_stream_write : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_stage2_real_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_output_loop_fu_552_stage2_real_ce0 : STD_LOGIC;
    signal grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_ce0 : STD_LOGIC;
    signal w_imag_362_3_reg_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_261_3_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_160_3_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_330_3_reg_438 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_229_3_reg_448 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_128_3_reg_458 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_1_reg_468 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fft32_Pipeline_1_fu_479_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fft32_Pipeline_3_fu_495_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fft32_Pipeline_5_fu_501_ap_start_reg : STD_LOGIC := '0';
    signal grp_fft32_Pipeline_7_fu_507_ap_start_reg : STD_LOGIC := '0';
    signal grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fft32_Pipeline_8_fu_529_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal select_ln18_loc_fu_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_1_loc_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_2_loc_fu_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_3_loc_fu_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_4_loc_fu_178 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_5_loc_fu_174 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_generic_sincos_16_4_s_fu_545_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal zext_ln141_fu_1312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_fu_1580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal block_1_fu_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_real_3_1_fu_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_3_2_fu_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_3_3_fu_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_1_fu_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_2_fu_166 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_imag_3_3_fu_170 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_fu_230 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln141_fu_1324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_real_2_fu_1257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_real_10_fu_1271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal add_ln45_fu_1629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln47_fu_1643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_imag_2_fu_1264_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_imag_10_fu_1278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_fu_1636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln48_fu_1650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_560_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_fu_642_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln111_fu_701_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln127_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_774_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln120_2_fu_788_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln120_2_cast_fu_792_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln120_2_fu_800_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_3_fu_766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln120_fu_804_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln120_1_fu_762_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln120_fu_784_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln120_1_fu_824_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln120_fu_836_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln120_2_fu_842_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_866_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln120_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln120_3_fu_890_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln120_fu_894_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal angle_11_fu_903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_3_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_10_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln120_2_fu_910_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln120cast_fu_926_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln120_fu_930_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_14_fu_935_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln120_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_15_fu_942_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln120_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_1_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_12_fu_918_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_16_fu_959_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln121_fu_993_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln121_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln121_fu_989_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln122_fu_1033_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln128_fu_1061_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln129_fu_1072_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln10_2_fu_1099_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_2_fu_1099_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_5_fu_1087_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_2_fu_1105_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln11_2_fu_1105_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_4_fu_1139_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_4_fu_1139_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_9_fu_1135_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_4_fu_1144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln11_4_fu_1144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_6_fu_1152_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_6_fu_1152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_13_fu_1149_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_6_fu_1157_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln11_6_fu_1157_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1657_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1665_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1673_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1681_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1689_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1697_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal cr0_fu_1241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ar0_fu_1221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ci0_fu_1245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai0_fu_1226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ci1_fu_1253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ar1_fu_1231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai1_fu_1236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cr1_fu_1249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln143_fu_1330_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_1360_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln143_2_fu_1374_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln143_2_cast_fu_1378_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln143_2_fu_1386_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_1352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln143_fu_1390_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln143_1_fu_1348_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln143_fu_1370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln143_1_fu_1410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln143_fu_1422_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln143_2_fu_1428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_1452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln143_fu_1468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_3_fu_1476_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln143_fu_1480_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal angle_2_fu_1489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln143_3_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_1_fu_1485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln143_2_fu_1496_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln143cast_fu_1512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln143_fu_1516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_5_fu_1521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln143_fu_1535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_fu_1540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_6_fu_1528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln143_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln143_1_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_1_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_3_fu_1504_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal angle_7_fu_1545_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln147_fu_1575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln10_fu_1586_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_2_fu_1590_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_fu_1601_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln10_fu_1601_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln10_1_fu_1598_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_1_fu_1606_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln11_1_fu_1606_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1705_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1713_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal t_real_fu_1611_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_imag_fu_1620_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1657_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1657_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1665_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1673_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1681_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1697_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1705_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1713_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_566_ce : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_1705_ce : STD_LOGIC;
    signal grp_fu_1713_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (81 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft32_fft32_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_real_ce0 : OUT STD_LOGIC;
        data_real_we0 : OUT STD_LOGIC;
        data_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_imag_ce0 : OUT STD_LOGIC;
        data_imag_we0 : OUT STD_LOGIC;
        data_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_input_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        in_stream_empty_n : IN STD_LOGIC;
        in_stream_read : OUT STD_LOGIC;
        data_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_real_ce0 : OUT STD_LOGIC;
        data_real_we0 : OUT STD_LOGIC;
        data_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_imag_ce0 : OUT STD_LOGIC;
        data_imag_we0 : OUT STD_LOGIC;
        data_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stage0_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_real_ce0 : OUT STD_LOGIC;
        stage0_real_we0 : OUT STD_LOGIC;
        stage0_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_imag_ce0 : OUT STD_LOGIC;
        stage0_imag_we0 : OUT STD_LOGIC;
        stage0_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stage1_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_real_ce0 : OUT STD_LOGIC;
        stage1_real_we0 : OUT STD_LOGIC;
        stage1_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage1_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_imag_ce0 : OUT STD_LOGIC;
        stage1_imag_we0 : OUT STD_LOGIC;
        stage1_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stage2_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage2_real_ce0 : OUT STD_LOGIC;
        stage2_real_we0 : OUT STD_LOGIC;
        stage2_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage2_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage2_imag_ce0 : OUT STD_LOGIC;
        stage2_imag_we0 : OUT STD_LOGIC;
        stage2_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_bit_rev_assign_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_real_ce0 : OUT STD_LOGIC;
        data_real_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_imag_ce0 : OUT STD_LOGIC;
        data_imag_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage0_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_real_ce0 : OUT STD_LOGIC;
        stage0_real_we0 : OUT STD_LOGIC;
        stage0_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_imag_ce0 : OUT STD_LOGIC;
        stage0_imag_we0 : OUT STD_LOGIC;
        stage0_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_stage1_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stage0_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_real_ce0 : OUT STD_LOGIC;
        stage0_real_we0 : OUT STD_LOGIC;
        stage0_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_real_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage0_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_real_ce1 : OUT STD_LOGIC;
        stage0_real_we1 : OUT STD_LOGIC;
        stage0_real_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_real_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_imag_ce0 : OUT STD_LOGIC;
        stage0_imag_we0 : OUT STD_LOGIC;
        stage0_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage0_imag_ce1 : OUT STD_LOGIC;
        stage0_imag_we1 : OUT STD_LOGIC;
        stage0_imag_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage0_imag_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage1_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_real_ce0 : OUT STD_LOGIC;
        stage1_real_we0 : OUT STD_LOGIC;
        stage1_real_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage1_real_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_real_ce1 : OUT STD_LOGIC;
        stage1_real_we1 : OUT STD_LOGIC;
        stage1_real_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage1_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_imag_ce0 : OUT STD_LOGIC;
        stage1_imag_we0 : OUT STD_LOGIC;
        stage1_imag_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        stage1_imag_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage1_imag_ce1 : OUT STD_LOGIC;
        stage1_imag_we1 : OUT STD_LOGIC;
        stage1_imag_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_fft32_Pipeline_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_imag_362_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w_imag_261_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w_imag_160_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w_real_330_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w_real_229_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        w_real_128_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_out_ap_vld : OUT STD_LOGIC;
        select_ln18_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_1_out_ap_vld : OUT STD_LOGIC;
        select_ln18_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_2_out_ap_vld : OUT STD_LOGIC;
        select_ln18_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_3_out_ap_vld : OUT STD_LOGIC;
        select_ln18_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_4_out_ap_vld : OUT STD_LOGIC;
        select_ln18_5_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        select_ln18_5_out_ap_vld : OUT STD_LOGIC );
    end component;


    component fft32_generic_sincos_16_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component fft32_fft32_Pipeline_output_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_stream_din : OUT STD_LOGIC_VECTOR (32 downto 0);
        out_stream_full_n : IN STD_LOGIC;
        out_stream_write : OUT STD_LOGIC;
        stage2_real_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage2_real_ce0 : OUT STD_LOGIC;
        stage2_real_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        stage2_imag_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stage2_imag_ce0 : OUT STD_LOGIC;
        stage2_imag_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft32_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft32_mul_16s_16s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mul_16s_14s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_mulsub_16s_16s_28s_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_muladd_16s_16s_28s_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_mulsub_16s_14s_28s_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_muladd_16s_14s_28s_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_data_real_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_stage0_real_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    data_real_U : component fft32_data_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_real_address0,
        ce0 => data_real_ce0,
        we0 => data_real_we0,
        d0 => data_real_d0,
        q0 => data_real_q0);

    data_imag_U : component fft32_data_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_imag_address0,
        ce0 => data_imag_ce0,
        we0 => data_imag_we0,
        d0 => data_imag_d0,
        q0 => data_imag_q0);

    stage0_real_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage0_real_address0,
        ce0 => stage0_real_ce0,
        we0 => stage0_real_we0,
        d0 => stage0_real_d0,
        q0 => stage0_real_q0,
        address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address1,
        ce1 => stage0_real_ce1,
        we1 => stage0_real_we1,
        d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d1,
        q1 => stage0_real_q1);

    stage0_imag_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage0_imag_address0,
        ce0 => stage0_imag_ce0,
        we0 => stage0_imag_we0,
        d0 => stage0_imag_d0,
        q0 => stage0_imag_q0,
        address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address1,
        ce1 => stage0_imag_ce1,
        we1 => stage0_imag_we1,
        d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d1,
        q1 => stage0_imag_q1);

    stage1_real_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage1_real_address0,
        ce0 => stage1_real_ce0,
        we0 => stage1_real_we0,
        d0 => stage1_real_d0,
        q0 => stage1_real_q0,
        address1 => stage1_real_address1,
        ce1 => stage1_real_ce1,
        we1 => stage1_real_we1,
        d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d1,
        q1 => stage1_real_q1);

    stage1_imag_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage1_imag_address0,
        ce0 => stage1_imag_ce0,
        we0 => stage1_imag_we0,
        d0 => stage1_imag_d0,
        q0 => stage1_imag_q0,
        address1 => stage1_imag_address1,
        ce1 => stage1_imag_ce1,
        we1 => stage1_imag_we1,
        d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d1,
        q1 => stage1_imag_q1);

    stage2_real_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage2_real_address0,
        ce0 => stage2_real_ce0,
        we0 => stage2_real_we0,
        d0 => stage2_real_d0,
        q0 => stage2_real_q0,
        address1 => stage2_real_address1,
        ce1 => stage2_real_ce1,
        we1 => stage2_real_we1,
        d1 => stage2_real_d1,
        q1 => stage2_real_q1);

    stage2_imag_U : component fft32_stage0_real_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage2_imag_address0,
        ce0 => stage2_imag_ce0,
        we0 => stage2_imag_we0,
        d0 => stage2_imag_d0,
        q0 => stage2_imag_q0,
        address1 => stage2_imag_address1,
        ce1 => stage2_imag_ce1,
        we1 => stage2_imag_we1,
        d1 => stage2_imag_d1,
        q1 => stage2_imag_q1);

    grp_fft32_Pipeline_1_fu_479 : component fft32_fft32_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_1_fu_479_ap_start,
        ap_done => grp_fft32_Pipeline_1_fu_479_ap_done,
        ap_idle => grp_fft32_Pipeline_1_fu_479_ap_idle,
        ap_ready => grp_fft32_Pipeline_1_fu_479_ap_ready,
        data_real_address0 => grp_fft32_Pipeline_1_fu_479_data_real_address0,
        data_real_ce0 => grp_fft32_Pipeline_1_fu_479_data_real_ce0,
        data_real_we0 => grp_fft32_Pipeline_1_fu_479_data_real_we0,
        data_real_d0 => grp_fft32_Pipeline_1_fu_479_data_real_d0,
        data_imag_address0 => grp_fft32_Pipeline_1_fu_479_data_imag_address0,
        data_imag_ce0 => grp_fft32_Pipeline_1_fu_479_data_imag_ce0,
        data_imag_we0 => grp_fft32_Pipeline_1_fu_479_data_imag_we0,
        data_imag_d0 => grp_fft32_Pipeline_1_fu_479_data_imag_d0);

    grp_fft32_Pipeline_input_loop_fu_487 : component fft32_fft32_Pipeline_input_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_input_loop_fu_487_ap_start,
        ap_done => grp_fft32_Pipeline_input_loop_fu_487_ap_done,
        ap_idle => grp_fft32_Pipeline_input_loop_fu_487_ap_idle,
        ap_ready => grp_fft32_Pipeline_input_loop_fu_487_ap_ready,
        in_stream_dout => in_stream_dout,
        in_stream_empty_n => in_stream_empty_n,
        in_stream_read => grp_fft32_Pipeline_input_loop_fu_487_in_stream_read,
        data_real_address0 => grp_fft32_Pipeline_input_loop_fu_487_data_real_address0,
        data_real_ce0 => grp_fft32_Pipeline_input_loop_fu_487_data_real_ce0,
        data_real_we0 => grp_fft32_Pipeline_input_loop_fu_487_data_real_we0,
        data_real_d0 => grp_fft32_Pipeline_input_loop_fu_487_data_real_d0,
        data_imag_address0 => grp_fft32_Pipeline_input_loop_fu_487_data_imag_address0,
        data_imag_ce0 => grp_fft32_Pipeline_input_loop_fu_487_data_imag_ce0,
        data_imag_we0 => grp_fft32_Pipeline_input_loop_fu_487_data_imag_we0,
        data_imag_d0 => grp_fft32_Pipeline_input_loop_fu_487_data_imag_d0);

    grp_fft32_Pipeline_3_fu_495 : component fft32_fft32_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_3_fu_495_ap_start,
        ap_done => grp_fft32_Pipeline_3_fu_495_ap_done,
        ap_idle => grp_fft32_Pipeline_3_fu_495_ap_idle,
        ap_ready => grp_fft32_Pipeline_3_fu_495_ap_ready,
        stage0_real_address0 => grp_fft32_Pipeline_3_fu_495_stage0_real_address0,
        stage0_real_ce0 => grp_fft32_Pipeline_3_fu_495_stage0_real_ce0,
        stage0_real_we0 => grp_fft32_Pipeline_3_fu_495_stage0_real_we0,
        stage0_real_d0 => grp_fft32_Pipeline_3_fu_495_stage0_real_d0,
        stage0_imag_address0 => grp_fft32_Pipeline_3_fu_495_stage0_imag_address0,
        stage0_imag_ce0 => grp_fft32_Pipeline_3_fu_495_stage0_imag_ce0,
        stage0_imag_we0 => grp_fft32_Pipeline_3_fu_495_stage0_imag_we0,
        stage0_imag_d0 => grp_fft32_Pipeline_3_fu_495_stage0_imag_d0);

    grp_fft32_Pipeline_5_fu_501 : component fft32_fft32_Pipeline_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_5_fu_501_ap_start,
        ap_done => grp_fft32_Pipeline_5_fu_501_ap_done,
        ap_idle => grp_fft32_Pipeline_5_fu_501_ap_idle,
        ap_ready => grp_fft32_Pipeline_5_fu_501_ap_ready,
        stage1_real_address0 => grp_fft32_Pipeline_5_fu_501_stage1_real_address0,
        stage1_real_ce0 => grp_fft32_Pipeline_5_fu_501_stage1_real_ce0,
        stage1_real_we0 => grp_fft32_Pipeline_5_fu_501_stage1_real_we0,
        stage1_real_d0 => grp_fft32_Pipeline_5_fu_501_stage1_real_d0,
        stage1_imag_address0 => grp_fft32_Pipeline_5_fu_501_stage1_imag_address0,
        stage1_imag_ce0 => grp_fft32_Pipeline_5_fu_501_stage1_imag_ce0,
        stage1_imag_we0 => grp_fft32_Pipeline_5_fu_501_stage1_imag_we0,
        stage1_imag_d0 => grp_fft32_Pipeline_5_fu_501_stage1_imag_d0);

    grp_fft32_Pipeline_7_fu_507 : component fft32_fft32_Pipeline_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_7_fu_507_ap_start,
        ap_done => grp_fft32_Pipeline_7_fu_507_ap_done,
        ap_idle => grp_fft32_Pipeline_7_fu_507_ap_idle,
        ap_ready => grp_fft32_Pipeline_7_fu_507_ap_ready,
        stage2_real_address0 => grp_fft32_Pipeline_7_fu_507_stage2_real_address0,
        stage2_real_ce0 => grp_fft32_Pipeline_7_fu_507_stage2_real_ce0,
        stage2_real_we0 => grp_fft32_Pipeline_7_fu_507_stage2_real_we0,
        stage2_real_d0 => grp_fft32_Pipeline_7_fu_507_stage2_real_d0,
        stage2_imag_address0 => grp_fft32_Pipeline_7_fu_507_stage2_imag_address0,
        stage2_imag_ce0 => grp_fft32_Pipeline_7_fu_507_stage2_imag_ce0,
        stage2_imag_we0 => grp_fft32_Pipeline_7_fu_507_stage2_imag_we0,
        stage2_imag_d0 => grp_fft32_Pipeline_7_fu_507_stage2_imag_d0);

    grp_fft32_Pipeline_bit_rev_assign_loop_fu_513 : component fft32_fft32_Pipeline_bit_rev_assign_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start,
        ap_done => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done,
        ap_idle => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_idle,
        ap_ready => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_ready,
        data_real_address0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_address0,
        data_real_ce0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_ce0,
        data_real_q0 => data_real_q0,
        data_imag_address0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_address0,
        data_imag_ce0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_ce0,
        data_imag_q0 => data_imag_q0,
        stage0_real_address0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_address0,
        stage0_real_ce0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_ce0,
        stage0_real_we0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_we0,
        stage0_real_d0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_d0,
        stage0_imag_address0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_address0,
        stage0_imag_ce0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_ce0,
        stage0_imag_we0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_we0,
        stage0_imag_d0 => grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_d0);

    grp_fft32_Pipeline_stage1_loop_fu_521 : component fft32_fft32_Pipeline_stage1_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_stage1_loop_fu_521_ap_start,
        ap_done => grp_fft32_Pipeline_stage1_loop_fu_521_ap_done,
        ap_idle => grp_fft32_Pipeline_stage1_loop_fu_521_ap_idle,
        ap_ready => grp_fft32_Pipeline_stage1_loop_fu_521_ap_ready,
        stage0_real_address0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address0,
        stage0_real_ce0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce0,
        stage0_real_we0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we0,
        stage0_real_d0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d0,
        stage0_real_q0 => stage0_real_q0,
        stage0_real_address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address1,
        stage0_real_ce1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce1,
        stage0_real_we1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we1,
        stage0_real_d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d1,
        stage0_real_q1 => stage0_real_q1,
        stage0_imag_address0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address0,
        stage0_imag_ce0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce0,
        stage0_imag_we0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we0,
        stage0_imag_d0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d0,
        stage0_imag_q0 => stage0_imag_q0,
        stage0_imag_address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address1,
        stage0_imag_ce1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce1,
        stage0_imag_we1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we1,
        stage0_imag_d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d1,
        stage0_imag_q1 => stage0_imag_q1,
        stage1_real_address0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address0,
        stage1_real_ce0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce0,
        stage1_real_we0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we0,
        stage1_real_d0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d0,
        stage1_real_address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address1,
        stage1_real_ce1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce1,
        stage1_real_we1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we1,
        stage1_real_d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d1,
        stage1_imag_address0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address0,
        stage1_imag_ce0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce0,
        stage1_imag_we0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we0,
        stage1_imag_d0 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d0,
        stage1_imag_address1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address1,
        stage1_imag_ce1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce1,
        stage1_imag_we1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we1,
        stage1_imag_d1 => grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d1);

    grp_fft32_Pipeline_8_fu_529 : component fft32_fft32_Pipeline_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_8_fu_529_ap_start,
        ap_done => grp_fft32_Pipeline_8_fu_529_ap_done,
        ap_idle => grp_fft32_Pipeline_8_fu_529_ap_idle,
        ap_ready => grp_fft32_Pipeline_8_fu_529_ap_ready,
        w_imag_362_0 => w_imag_3_3_fu_170,
        w_imag_261_0 => w_imag_3_2_fu_166,
        w_imag_160_0 => w_imag_3_1_fu_162,
        w_real_330_0 => w_real_3_3_fu_158,
        w_real_229_0 => w_real_3_2_fu_154,
        w_real_128_0 => w_real_3_1_fu_150,
        select_ln18_out => grp_fft32_Pipeline_8_fu_529_select_ln18_out,
        select_ln18_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_out_ap_vld,
        select_ln18_1_out => grp_fft32_Pipeline_8_fu_529_select_ln18_1_out,
        select_ln18_1_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_1_out_ap_vld,
        select_ln18_2_out => grp_fft32_Pipeline_8_fu_529_select_ln18_2_out,
        select_ln18_2_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_2_out_ap_vld,
        select_ln18_3_out => grp_fft32_Pipeline_8_fu_529_select_ln18_3_out,
        select_ln18_3_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_3_out_ap_vld,
        select_ln18_4_out => grp_fft32_Pipeline_8_fu_529_select_ln18_4_out,
        select_ln18_4_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_4_out_ap_vld,
        select_ln18_5_out => grp_fft32_Pipeline_8_fu_529_select_ln18_5_out,
        select_ln18_5_out_ap_vld => grp_fft32_Pipeline_8_fu_529_select_ln18_5_out_ap_vld);

    grp_generic_sincos_16_4_s_fu_545 : component fft32_generic_sincos_16_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_sincos_16_4_s_fu_545_ap_start,
        ap_done => grp_generic_sincos_16_4_s_fu_545_ap_done,
        ap_idle => grp_generic_sincos_16_4_s_fu_545_ap_idle,
        ap_ready => grp_generic_sincos_16_4_s_fu_545_ap_ready,
        in_val => grp_generic_sincos_16_4_s_fu_545_in_val,
        ap_return_0 => grp_generic_sincos_16_4_s_fu_545_ap_return_0,
        ap_return_1 => grp_generic_sincos_16_4_s_fu_545_ap_return_1);

    grp_fft32_Pipeline_output_loop_fu_552 : component fft32_fft32_Pipeline_output_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft32_Pipeline_output_loop_fu_552_ap_start,
        ap_done => grp_fft32_Pipeline_output_loop_fu_552_ap_done,
        ap_idle => grp_fft32_Pipeline_output_loop_fu_552_ap_idle,
        ap_ready => grp_fft32_Pipeline_output_loop_fu_552_ap_ready,
        out_stream_din => grp_fft32_Pipeline_output_loop_fu_552_out_stream_din,
        out_stream_full_n => out_stream_full_n,
        out_stream_write => grp_fft32_Pipeline_output_loop_fu_552_out_stream_write,
        stage2_real_address0 => grp_fft32_Pipeline_output_loop_fu_552_stage2_real_address0,
        stage2_real_ce0 => grp_fft32_Pipeline_output_loop_fu_552_stage2_real_ce0,
        stage2_real_q0 => stage2_real_q0,
        stage2_imag_address0 => grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_address0,
        stage2_imag_ce0 => grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_ce0,
        stage2_imag_q0 => stage2_imag_q0);

    dmul_64ns_64ns_64_7_max_dsp_1_U44 : component fft32_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_560_p0,
        din1 => grp_fu_560_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_560_p2);

    sitodp_32ns_64_6_no_dsp_1_U45 : component fft32_sitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_566_p0,
        ce => grp_fu_566_ce,
        dout => grp_fu_566_p1);

    mul_16s_16s_28_1_1_U46 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln10_2_fu_1099_p0,
        din1 => mul_ln10_2_fu_1099_p1,
        dout => mul_ln10_2_fu_1099_p2);

    mul_16s_16s_28_1_1_U47 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_2_fu_1105_p0,
        din1 => mul_ln11_2_fu_1105_p1,
        dout => mul_ln11_2_fu_1105_p2);

    mul_16s_16s_28_1_1_U48 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln10_4_fu_1139_p0,
        din1 => mul_ln10_4_fu_1139_p1,
        dout => mul_ln10_4_fu_1139_p2);

    mul_16s_16s_28_1_1_U49 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_4_fu_1144_p0,
        din1 => mul_ln11_4_fu_1144_p1,
        dout => mul_ln11_4_fu_1144_p2);

    mul_16s_16s_28_1_1_U50 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln10_6_fu_1152_p0,
        din1 => mul_ln10_6_fu_1152_p1,
        dout => mul_ln10_6_fu_1152_p2);

    mul_16s_16s_28_1_1_U51 : component fft32_mul_16s_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_6_fu_1157_p0,
        din1 => mul_ln11_6_fu_1157_p1,
        dout => mul_ln11_6_fu_1157_p2);

    mul_16s_14s_28_1_1_U52 : component fft32_mul_16s_14s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln10_fu_1601_p0,
        din1 => mul_ln10_fu_1601_p1,
        dout => mul_ln10_fu_1601_p2);

    mul_16s_14s_28_1_1_U53 : component fft32_mul_16s_14s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_1_fu_1606_p0,
        din1 => mul_ln11_1_fu_1606_p1,
        dout => mul_ln11_1_fu_1606_p2);

    mac_mulsub_16s_16s_28s_28_4_1_U54 : component fft32_mac_mulsub_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1657_p0,
        din1 => grp_fu_1657_p1,
        din2 => mul_ln10_2_reg_2034,
        ce => ap_const_logic_1,
        dout => grp_fu_1657_p3);

    mac_muladd_16s_16s_28s_28_4_1_U55 : component fft32_mac_muladd_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1665_p0,
        din1 => grp_fu_1665_p1,
        din2 => mul_ln11_2_reg_2039,
        ce => ap_const_logic_1,
        dout => grp_fu_1665_p3);

    mac_mulsub_16s_16s_28s_28_4_1_U56 : component fft32_mac_mulsub_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_imag_261_3_reg_418,
        din1 => grp_fu_1673_p1,
        din2 => mul_ln10_4_reg_2085,
        ce => ap_const_logic_1,
        dout => grp_fu_1673_p3);

    mac_muladd_16s_16s_28s_28_4_1_U57 : component fft32_mac_muladd_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1681_p0,
        din1 => w_real_229_3_reg_448,
        din2 => mul_ln11_4_reg_2090,
        ce => ap_const_logic_1,
        dout => grp_fu_1681_p3);

    mac_mulsub_16s_16s_28s_28_4_1_U58 : component fft32_mac_mulsub_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_imag_362_3_reg_408,
        din1 => grp_fu_1689_p1,
        din2 => mul_ln10_6_reg_2095,
        ce => ap_const_logic_1,
        dout => grp_fu_1689_p3);

    mac_muladd_16s_16s_28s_28_4_1_U59 : component fft32_mac_muladd_16s_16s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1697_p0,
        din1 => w_real_330_3_reg_438,
        din2 => mul_ln11_6_reg_2100,
        ce => ap_const_logic_1,
        dout => grp_fu_1697_p3);

    mac_mulsub_16s_14s_28s_28_4_1_U60 : component fft32_mac_mulsub_16s_14s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => stage2_imag_q0,
        din1 => grp_fu_1705_p1,
        din2 => mul_ln10_reg_2283,
        ce => grp_fu_1705_ce,
        dout => grp_fu_1705_p3);

    mac_muladd_16s_14s_28s_28_4_1_U61 : component fft32_mac_muladd_16s_14s_28s_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => stage2_real_q0,
        din1 => grp_fu_1713_p1,
        din2 => mul_ln11_1_reg_2288,
        ce => grp_fu_1713_ce,
        dout => grp_fu_1713_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_1_fu_479_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_1_fu_479_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_fft32_Pipeline_1_fu_479_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_1_fu_479_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_1_fu_479_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_3_fu_495_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_3_fu_495_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fft32_Pipeline_3_fu_495_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_3_fu_495_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_3_fu_495_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_5_fu_501_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_5_fu_501_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fft32_Pipeline_5_fu_501_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_5_fu_501_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_5_fu_501_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_7_fu_507_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_7_fu_507_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_fft32_Pipeline_7_fu_507_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_7_fu_507_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_7_fu_507_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_8_fu_529_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_8_fu_529_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln107_fu_606_p2 = ap_const_lv1_0))) then 
                    grp_fft32_Pipeline_8_fu_529_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_8_fu_529_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_8_fu_529_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_input_loop_fu_487_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln141_fu_1318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_output_loop_fu_552_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft32_Pipeline_stage1_loop_fu_521_ap_ready = ap_const_logic_1)) then 
                    grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_sincos_16_4_s_fu_545_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_sincos_16_4_s_fu_545_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
                    grp_generic_sincos_16_4_s_fu_545_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_sincos_16_4_s_fu_545_ap_ready = ap_const_logic_1)) then 
                    grp_generic_sincos_16_4_s_fu_545_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_1_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                block_1_fu_146 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln118_fu_680_p2 = ap_const_lv1_1))) then 
                block_1_fu_146 <= block_2_reg_1806;
            end if; 
        end if;
    end process;

    k_1_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                k_1_reg_468 <= add_ln118_reg_1873;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k_1_reg_468 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    k_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln107_fu_606_p2 = ap_const_lv1_1))) then 
                k_fu_230 <= ap_const_lv5_0;
            elsif (((icmp_ln141_fu_1318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                k_fu_230 <= add_ln141_fu_1324_p2;
            end if; 
        end if;
    end process;

    reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_588 <= stage1_real_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_588 <= stage1_real_q0;
            end if; 
        end if;
    end process;

    reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                reg_593 <= stage1_imag_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_593 <= stage1_imag_q0;
            end if; 
        end if;
    end process;

    w_imag_160_3_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_imag_160_3_reg_428 <= w_imag_3_8_fu_1053_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_imag_160_3_reg_428 <= select_ln18_5_loc_fu_174;
            end if; 
        end if;
    end process;

    w_imag_261_3_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_imag_261_3_reg_418 <= w_imag_3_7_fu_1045_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_imag_261_3_reg_418 <= select_ln18_4_loc_fu_178;
            end if; 
        end if;
    end process;

    w_imag_362_3_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_imag_362_3_reg_408 <= w_imag_3_fu_1037_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_imag_362_3_reg_408 <= select_ln18_3_loc_fu_182;
            end if; 
        end if;
    end process;

    w_real_128_3_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_real_128_3_reg_458 <= w_real_3_8_fu_1025_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_real_128_3_reg_458 <= select_ln18_2_loc_fu_186;
            end if; 
        end if;
    end process;

    w_real_229_3_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_real_229_3_reg_448 <= w_real_3_7_fu_1017_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_real_229_3_reg_448 <= select_ln18_1_loc_fu_190;
            end if; 
        end if;
    end process;

    w_real_330_3_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                w_real_330_3_reg_438 <= w_real_3_fu_1009_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_real_330_3_reg_438 <= select_ln18_loc_fu_194;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_1318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                a_imag_reg_2195 <= zext_ln141_fu_1312_p1(5 - 1 downto 0);
                a_real_reg_2190 <= zext_ln141_fu_1312_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln118_fu_680_p2 = ap_const_lv1_0))) then
                add_ln118_reg_1873 <= add_ln118_fu_695_p2;
                trunc_ln120_reg_1862 <= trunc_ln120_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                angle_18_reg_1951 <= angle_18_fu_981_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                angle_19_reg_2245 <= angle_19_fu_1567_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                angle_9_reg_1940 <= angle_9_fu_862_p1;
                bitcast_ln724_1_reg_1906 <= bitcast_ln724_1_fu_758_p1;
                icmp_ln120_1_reg_1923 <= icmp_ln120_1_fu_830_p2;
                icmp_ln120_2_reg_1934 <= icmp_ln120_2_fu_856_p2;
                icmp_ln120_4_reg_1946 <= icmp_ln120_4_fu_876_p2;
                icmp_ln120_reg_1916 <= icmp_ln120_fu_818_p2;
                select_ln120_1_reg_1928 <= select_ln120_1_fu_848_p3;
                select_ln120_reg_1911 <= select_ln120_fu_810_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                angle_reg_2234 <= angle_fu_1448_p1;
                bitcast_ln724_reg_2200 <= bitcast_ln724_fu_1344_p1;
                icmp_ln143_1_reg_2217 <= icmp_ln143_1_fu_1416_p2;
                icmp_ln143_2_reg_2228 <= icmp_ln143_2_fu_1442_p2;
                icmp_ln143_4_reg_2240 <= icmp_ln143_4_fu_1462_p2;
                icmp_ln143_reg_2210 <= icmp_ln143_fu_1404_p2;
                select_ln143_1_reg_2222 <= select_ln143_1_fu_1434_p3;
                select_ln143_reg_2205 <= select_ln143_fu_1396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                b_imag_reg_2255 <= zext_ln147_fu_1580_p1(5 - 1 downto 0);
                b_real_reg_2250 <= zext_ln147_fu_1580_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln118_fu_680_p2 = ap_const_lv1_1))) then
                    base_reg_1878(4 downto 2) <= base_fu_704_p3(4 downto 2);
                w_imag_3_1_fu_162 <= w_imag_160_3_reg_428;
                w_imag_3_2_fu_166 <= w_imag_261_3_reg_418;
                w_imag_3_3_fu_170 <= w_imag_362_3_reg_408;
                w_real_3_1_fu_150 <= w_real_128_3_reg_458;
                w_real_3_2_fu_154 <= w_real_229_3_reg_448;
                w_real_3_3_fu_158 <= w_real_330_3_reg_438;
                    zext_ln127_reg_1885(4 downto 2) <= zext_ln127_fu_718_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                block_2_reg_1806 <= block_2_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                conv_reg_1901 <= grp_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                k_2_reg_2177 <= k_fu_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                mul_ln10_2_reg_2034 <= mul_ln10_2_fu_1099_p2;
                mul_ln11_2_reg_2039 <= mul_ln11_2_fu_1105_p2;
                sext_ln10_10_reg_2050 <= sext_ln10_10_fu_1115_p1;
                sext_ln10_12_reg_2067 <= sext_ln10_12_fu_1123_p1;
                sext_ln10_14_reg_2073 <= sext_ln10_14_fu_1127_p1;
                sext_ln10_8_reg_2044 <= sext_ln10_8_fu_1111_p1;
                x_real_3_load_reg_2062 <= stage1_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                mul_ln10_4_reg_2085 <= mul_ln10_4_fu_1139_p2;
                mul_ln10_6_reg_2095 <= mul_ln10_6_fu_1152_p2;
                mul_ln11_4_reg_2090 <= mul_ln11_4_fu_1144_p2;
                mul_ln11_6_reg_2100 <= mul_ln11_6_fu_1157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                mul_ln10_reg_2283 <= mul_ln10_fu_1601_p2;
                mul_ln11_1_reg_2288 <= mul_ln11_1_fu_1606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                outcos_reg_2260 <= grp_generic_sincos_16_4_s_fu_545_ap_return_1;
                sext_ln10_2_reg_2271 <= sext_ln10_2_fu_1590_p1;
                sext_ln10_reg_2265 <= sext_ln10_fu_1586_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                r_imag_11_reg_2162 <= r_imag_11_fu_1291_p2;
                r_imag_12_reg_2172 <= r_imag_12_fu_1303_p2;
                r_real_11_reg_2157 <= r_real_11_fu_1285_p2;
                r_real_12_reg_2167 <= r_real_12_fu_1297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                r_imag_7_reg_2127 <= grp_fu_1665_p3(27 downto 12);
                r_imag_8_reg_2139 <= grp_fu_1681_p3(27 downto 12);
                r_imag_9_reg_2151 <= grp_fu_1697_p3(27 downto 12);
                r_real_7_reg_2121 <= grp_fu_1657_p3(27 downto 12);
                r_real_8_reg_2133 <= grp_fu_1673_p3(27 downto 12);
                r_real_9_reg_2145 <= grp_fu_1689_p3(27 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_577 <= grp_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_583 <= grp_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_1_loc_fu_190 <= grp_fft32_Pipeline_8_fu_529_select_ln18_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_2_loc_fu_186 <= grp_fft32_Pipeline_8_fu_529_select_ln18_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_3_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_3_loc_fu_182 <= grp_fft32_Pipeline_8_fu_529_select_ln18_3_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_4_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_4_loc_fu_178 <= grp_fft32_Pipeline_8_fu_529_select_ln18_4_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_5_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_5_loc_fu_174 <= grp_fft32_Pipeline_8_fu_529_select_ln18_5_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fft32_Pipeline_8_fu_529_select_ln18_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln18_loc_fu_194 <= grp_fft32_Pipeline_8_fu_529_select_ln18_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                    zext_ln126_reg_2105(4 downto 2) <= zext_ln126_fu_1162_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                    zext_ln128_reg_1986(4 downto 2) <= zext_ln128_fu_1066_p1(4 downto 2);
                    zext_ln129_reg_2002(4 downto 2) <= zext_ln129_fu_1077_p1(4 downto 2);
            end if;
        end if;
    end process;
    base_reg_1878(1 downto 0) <= "00";
    zext_ln127_reg_1885(1 downto 0) <= "01";
    zext_ln127_reg_1885(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln128_reg_1986(1 downto 0) <= "10";
    zext_ln128_reg_1986(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln129_reg_2002(1 downto 0) <= "11";
    zext_ln129_reg_2002(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln126_reg_2105(1 downto 0) <= "00";
    zext_ln126_reg_2105(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln107_fu_606_p2, ap_CS_fsm_state17, icmp_ln118_fu_680_p2, ap_CS_fsm_state47, ap_CS_fsm_state55, icmp_ln141_fu_1318_p2, ap_CS_fsm_state78, grp_fft32_Pipeline_1_fu_479_ap_done, grp_fft32_Pipeline_input_loop_fu_487_ap_done, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done, grp_fft32_Pipeline_stage1_loop_fu_521_ap_done, grp_fft32_Pipeline_8_fu_529_ap_done, grp_generic_sincos_16_4_s_fu_545_ap_done, grp_fft32_Pipeline_output_loop_fu_552_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state82, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_fft32_Pipeline_1_fu_479_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_fft32_Pipeline_input_loop_fu_487_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_fft32_Pipeline_stage1_loop_fu_521_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln107_fu_606_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_fft32_Pipeline_8_fu_529_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln118_fu_680_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state55 => 
                if (((icmp_ln141_fu_1318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state82 => 
                if (((grp_fft32_Pipeline_output_loop_fu_552_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_imag_2_fu_1264_p2 <= std_logic_vector(unsigned(ci0_fu_1245_p2) + unsigned(ai0_fu_1226_p2));
    a_real_2_fu_1257_p2 <= std_logic_vector(unsigned(cr0_fu_1241_p2) + unsigned(ar0_fu_1221_p2));
    add_ln118_fu_695_p2 <= std_logic_vector(unsigned(k_1_reg_468) + unsigned(ap_const_lv3_1));
    add_ln120_fu_836_p2 <= std_logic_vector(unsigned(sub_ln120_1_fu_824_p2) + unsigned(ap_const_lv12_FF4));
    add_ln141_fu_1324_p2 <= std_logic_vector(unsigned(k_fu_230) + unsigned(ap_const_lv5_1));
    add_ln143_fu_1422_p2 <= std_logic_vector(unsigned(sub_ln143_1_fu_1410_p2) + unsigned(ap_const_lv12_FF4));
    add_ln45_fu_1629_p2 <= std_logic_vector(unsigned(stage2_real_q1) + unsigned(t_real_fu_1611_p4));
    add_ln46_fu_1636_p2 <= std_logic_vector(unsigned(stage2_imag_q1) + unsigned(t_imag_fu_1620_p4));
    ai0_fu_1226_p2 <= std_logic_vector(unsigned(reg_593) + unsigned(r_imag_7_reg_2127));
    ai1_fu_1236_p2 <= std_logic_vector(unsigned(reg_593) - unsigned(r_imag_7_reg_2127));
    and_ln120_1_fu_976_p2 <= (xor_ln120_1_fu_970_p2 and icmp_ln120_1_reg_1923);
    and_ln120_fu_954_p2 <= (xor_ln120_fu_949_p2 and icmp_ln120_2_reg_1934);
    and_ln143_1_fu_1562_p2 <= (xor_ln143_1_fu_1556_p2 and icmp_ln143_1_reg_2217);
    and_ln143_fu_1540_p2 <= (xor_ln143_fu_1535_p2 and icmp_ln143_2_reg_2228);
    angle_10_fu_899_p1 <= ashr_ln120_fu_894_p2(16 - 1 downto 0);
    angle_11_fu_903_p3 <= bitcast_ln724_1_reg_1906(63 downto 63);
    angle_12_fu_918_p3 <= 
        angle_10_fu_899_p1 when (icmp_ln120_3_fu_885_p2(0) = '1') else 
        select_ln120_2_fu_910_p3;
    angle_14_fu_935_p3 <= 
        shl_ln120_fu_930_p2 when (icmp_ln120_4_reg_1946(0) = '1') else 
        ap_const_lv16_0;
    angle_15_fu_942_p3 <= 
        ap_const_lv16_0 when (icmp_ln120_reg_1916(0) = '1') else 
        angle_14_fu_935_p3;
    angle_16_fu_959_p3 <= 
        angle_9_reg_1940 when (and_ln120_fu_954_p2(0) = '1') else 
        angle_15_fu_942_p3;
    angle_18_fu_981_p3 <= 
        angle_12_fu_918_p3 when (and_ln120_1_fu_976_p2(0) = '1') else 
        angle_16_fu_959_p3;
    angle_19_fu_1567_p3 <= 
        angle_3_fu_1504_p3 when (and_ln143_1_fu_1562_p2(0) = '1') else 
        angle_7_fu_1545_p3;
    angle_1_fu_1485_p1 <= ashr_ln143_fu_1480_p2(16 - 1 downto 0);
    angle_2_fu_1489_p3 <= bitcast_ln724_reg_2200(63 downto 63);
    angle_3_fu_1504_p3 <= 
        angle_1_fu_1485_p1 when (icmp_ln143_3_fu_1471_p2(0) = '1') else 
        select_ln143_2_fu_1496_p3;
    angle_5_fu_1521_p3 <= 
        shl_ln143_fu_1516_p2 when (icmp_ln143_4_reg_2240(0) = '1') else 
        ap_const_lv16_0;
    angle_6_fu_1528_p3 <= 
        ap_const_lv16_0 when (icmp_ln143_reg_2210(0) = '1') else 
        angle_5_fu_1521_p3;
    angle_7_fu_1545_p3 <= 
        angle_reg_2234 when (and_ln143_fu_1540_p2(0) = '1') else 
        angle_6_fu_1528_p3;
    angle_9_fu_862_p1 <= select_ln120_fu_810_p3(16 - 1 downto 0);
    angle_fu_1448_p1 <= select_ln143_fu_1396_p3(16 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_ap_done)
    begin
        if ((grp_fft32_Pipeline_stage1_loop_fu_521_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_fft32_Pipeline_8_fu_529_ap_done)
    begin
        if ((grp_fft32_Pipeline_8_fu_529_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_fft32_Pipeline_1_fu_479_ap_done)
    begin
        if ((grp_fft32_Pipeline_1_fu_479_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(grp_generic_sincos_16_4_s_fu_545_ap_done)
    begin
        if ((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_fft32_Pipeline_input_loop_fu_487_ap_done)
    begin
        if ((grp_fft32_Pipeline_input_loop_fu_487_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;

    ap_ST_fsm_state78_blk_assign_proc : process(grp_generic_sincos_16_4_s_fu_545_ap_done)
    begin
        if ((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state78_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state78_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(grp_fft32_Pipeline_output_loop_fu_552_ap_done)
    begin
        if ((grp_fft32_Pipeline_output_loop_fu_552_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done)
    begin
        if ((grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state6_on_subcall_done_assign_proc : process(grp_fft32_Pipeline_3_fu_495_ap_done, grp_fft32_Pipeline_5_fu_501_ap_done, grp_fft32_Pipeline_7_fu_507_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_fft32_Pipeline_7_fu_507_ap_done = ap_const_logic_0) or (grp_fft32_Pipeline_5_fu_501_ap_done = ap_const_logic_0) or (grp_fft32_Pipeline_3_fu_495_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_fft32_Pipeline_output_loop_fu_552_ap_done, ap_CS_fsm_state82)
    begin
        if (((grp_fft32_Pipeline_output_loop_fu_552_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_fft32_Pipeline_output_loop_fu_552_ap_done, ap_CS_fsm_state82)
    begin
        if (((grp_fft32_Pipeline_output_loop_fu_552_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ar0_fu_1221_p2 <= std_logic_vector(unsigned(reg_588) + unsigned(r_real_7_reg_2121));
    ar1_fu_1231_p2 <= std_logic_vector(unsigned(reg_588) - unsigned(r_real_7_reg_2121));
    ashr_ln120_fu_894_p2 <= std_logic_vector(shift_right(signed(select_ln120_reg_1911),to_integer(unsigned('0' & zext_ln120_3_fu_890_p1(31-1 downto 0)))));
    ashr_ln143_fu_1480_p2 <= std_logic_vector(shift_right(signed(select_ln143_reg_2205),to_integer(unsigned('0' & zext_ln143_3_fu_1476_p1(31-1 downto 0)))));
    base_fu_704_p3 <= (trunc_ln111_fu_701_p1 & ap_const_lv2_0);
    bitcast_ln724_1_fu_758_p1 <= reg_583;
    bitcast_ln724_fu_1344_p1 <= reg_583;
    block_2_fu_612_p2 <= std_logic_vector(unsigned(block_1_fu_146) + unsigned(ap_const_lv4_1));
    ci0_fu_1245_p2 <= std_logic_vector(unsigned(r_imag_9_reg_2151) + unsigned(r_imag_8_reg_2139));
    ci1_fu_1253_p2 <= std_logic_vector(unsigned(r_imag_8_reg_2139) - unsigned(r_imag_9_reg_2151));
    cr0_fu_1241_p2 <= std_logic_vector(unsigned(r_real_9_reg_2145) + unsigned(r_real_8_reg_2133));
    cr1_fu_1249_p2 <= std_logic_vector(unsigned(r_real_8_reg_2133) - unsigned(r_real_9_reg_2145));

    data_imag_address0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_imag_address0, grp_fft32_Pipeline_input_loop_fu_487_data_imag_address0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_imag_address0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_imag_address0 <= grp_fft32_Pipeline_input_loop_fu_487_data_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_imag_address0 <= grp_fft32_Pipeline_1_fu_479_data_imag_address0;
        else 
            data_imag_address0 <= "XXXXX";
        end if; 
    end process;


    data_imag_ce0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_imag_ce0, grp_fft32_Pipeline_input_loop_fu_487_data_imag_ce0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_imag_ce0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_imag_ce0 <= grp_fft32_Pipeline_input_loop_fu_487_data_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_imag_ce0 <= grp_fft32_Pipeline_1_fu_479_data_imag_ce0;
        else 
            data_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_imag_d0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_imag_d0, grp_fft32_Pipeline_input_loop_fu_487_data_imag_d0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_imag_d0 <= grp_fft32_Pipeline_input_loop_fu_487_data_imag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_imag_d0 <= grp_fft32_Pipeline_1_fu_479_data_imag_d0;
        else 
            data_imag_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_imag_we0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_imag_we0, grp_fft32_Pipeline_input_loop_fu_487_data_imag_we0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_imag_we0 <= grp_fft32_Pipeline_input_loop_fu_487_data_imag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_imag_we0 <= grp_fft32_Pipeline_1_fu_479_data_imag_we0;
        else 
            data_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_real_address0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_real_address0, grp_fft32_Pipeline_input_loop_fu_487_data_real_address0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_real_address0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_real_address0 <= grp_fft32_Pipeline_input_loop_fu_487_data_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_real_address0 <= grp_fft32_Pipeline_1_fu_479_data_real_address0;
        else 
            data_real_address0 <= "XXXXX";
        end if; 
    end process;


    data_real_ce0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_real_ce0, grp_fft32_Pipeline_input_loop_fu_487_data_real_ce0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_real_ce0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_data_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_real_ce0 <= grp_fft32_Pipeline_input_loop_fu_487_data_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_real_ce0 <= grp_fft32_Pipeline_1_fu_479_data_real_ce0;
        else 
            data_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_real_d0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_real_d0, grp_fft32_Pipeline_input_loop_fu_487_data_real_d0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_real_d0 <= grp_fft32_Pipeline_input_loop_fu_487_data_real_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_real_d0 <= grp_fft32_Pipeline_1_fu_479_data_real_d0;
        else 
            data_real_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_real_we0_assign_proc : process(grp_fft32_Pipeline_1_fu_479_data_real_we0, grp_fft32_Pipeline_input_loop_fu_487_data_real_we0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_real_we0 <= grp_fft32_Pipeline_input_loop_fu_487_data_real_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_real_we0 <= grp_fft32_Pipeline_1_fu_479_data_real_we0;
        else 
            data_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    group_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(group_fu_642_p4),32));
    group_fu_642_p4 <= block_1_fu_146(2 downto 1);
    grp_fft32_Pipeline_1_fu_479_ap_start <= grp_fft32_Pipeline_1_fu_479_ap_start_reg;
    grp_fft32_Pipeline_3_fu_495_ap_start <= grp_fft32_Pipeline_3_fu_495_ap_start_reg;
    grp_fft32_Pipeline_5_fu_501_ap_start <= grp_fft32_Pipeline_5_fu_501_ap_start_reg;
    grp_fft32_Pipeline_7_fu_507_ap_start <= grp_fft32_Pipeline_7_fu_507_ap_start_reg;
    grp_fft32_Pipeline_8_fu_529_ap_start <= grp_fft32_Pipeline_8_fu_529_ap_start_reg;
    grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_ap_start_reg;
    grp_fft32_Pipeline_input_loop_fu_487_ap_start <= grp_fft32_Pipeline_input_loop_fu_487_ap_start_reg;
    grp_fft32_Pipeline_output_loop_fu_552_ap_start <= grp_fft32_Pipeline_output_loop_fu_552_ap_start_reg;
    grp_fft32_Pipeline_stage1_loop_fu_521_ap_start <= grp_fft32_Pipeline_stage1_loop_fu_521_ap_start_reg;
    grp_fu_1657_p0 <= sext_ln10_6_fu_1091_p1(16 - 1 downto 0);
    grp_fu_1657_p1 <= sext_ln10_7_fu_1095_p1(16 - 1 downto 0);
    grp_fu_1665_p0 <= sext_ln10_7_fu_1095_p1(16 - 1 downto 0);
    grp_fu_1665_p1 <= sext_ln10_4_fu_1083_p1(16 - 1 downto 0);
    grp_fu_1673_p1 <= sext_ln10_11_fu_1119_p1(16 - 1 downto 0);
    grp_fu_1681_p0 <= sext_ln10_11_fu_1119_p1(16 - 1 downto 0);
    grp_fu_1689_p1 <= sext_ln10_15_fu_1131_p1(16 - 1 downto 0);
    grp_fu_1697_p0 <= sext_ln10_15_fu_1131_p1(16 - 1 downto 0);

    grp_fu_1705_ce_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state79, grp_generic_sincos_16_4_s_fu_545_ap_done, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            grp_fu_1705_ce <= ap_const_logic_1;
        else 
            grp_fu_1705_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1705_p1 <= sext_ln10_3_fu_1594_p1(14 - 1 downto 0);

    grp_fu_1713_ce_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state79, grp_generic_sincos_16_4_s_fu_545_ap_done, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or ((grp_generic_sincos_16_4_s_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            grp_fu_1713_ce <= ap_const_logic_1;
        else 
            grp_fu_1713_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1713_p1 <= sext_ln10_3_fu_1594_p1(14 - 1 downto 0);

    grp_fu_560_p0_assign_proc : process(reg_577, reg_583, conv_reg_1901, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state61, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_560_p0 <= reg_577;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_560_p0 <= reg_583;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_560_p0 <= conv_reg_1901;
        else 
            grp_fu_560_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_560_p1_assign_proc : process(reg_577, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state37, ap_CS_fsm_state61, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_560_p1 <= ap_const_lv64_3FA0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_560_p1 <= reg_577;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_560_p1 <= ap_const_lv64_C01921FB54442D18;
        else 
            grp_fu_560_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_566_ce_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state60, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state55, grp_fft32_Pipeline_8_fu_529_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((grp_fft32_Pipeline_8_fu_529_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_566_ce <= ap_const_logic_1;
        else 
            grp_fu_566_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_566_p0_assign_proc : process(ap_CS_fsm_state11, group_cast_fu_652_p1, ap_CS_fsm_state17, zext_ln120_1_fu_690_p1, ap_CS_fsm_state55, zext_ln143_1_fu_1334_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_566_p0 <= zext_ln143_1_fu_1334_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_566_p0 <= zext_ln120_1_fu_690_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_566_p0 <= group_cast_fu_652_p1;
        else 
            grp_fu_566_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_sincos_16_4_s_fu_545_ap_start <= grp_generic_sincos_16_4_s_fu_545_ap_start_reg;

    grp_generic_sincos_16_4_s_fu_545_in_val_assign_proc : process(angle_18_reg_1951, ap_CS_fsm_state47, angle_19_reg_2245, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_generic_sincos_16_4_s_fu_545_in_val <= angle_19_reg_2245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_generic_sincos_16_4_s_fu_545_in_val <= angle_18_reg_1951;
        else 
            grp_generic_sincos_16_4_s_fu_545_in_val <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln107_fu_606_p2 <= "1" when (block_1_fu_146 = ap_const_lv4_8) else "0";
    icmp_ln118_fu_680_p2 <= "1" when (k_1_reg_468 = ap_const_lv3_4) else "0";
    icmp_ln120_1_fu_830_p2 <= "1" when (signed(sub_ln120_1_fu_824_p2) > signed(ap_const_lv12_C)) else "0";
    icmp_ln120_2_fu_856_p2 <= "1" when (sub_ln120_1_fu_824_p2 = ap_const_lv12_C) else "0";
    icmp_ln120_3_fu_885_p2 <= "1" when (unsigned(select_ln120_1_reg_1928) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln120_4_fu_876_p2 <= "1" when (tmp_5_fu_866_p4 = ap_const_lv8_0) else "0";
    icmp_ln120_fu_818_p2 <= "1" when (trunc_ln120_1_fu_762_p1 = ap_const_lv63_0) else "0";
    icmp_ln121_1_fu_998_p2 <= "1" when (trunc_ln120_reg_1862 = ap_const_lv2_2) else "0";
    icmp_ln121_fu_993_p2 <= "1" when (trunc_ln120_reg_1862 = ap_const_lv2_1) else "0";
    icmp_ln141_fu_1318_p2 <= "1" when (k_fu_230 = ap_const_lv5_10) else "0";
    icmp_ln143_1_fu_1416_p2 <= "1" when (signed(sub_ln143_1_fu_1410_p2) > signed(ap_const_lv12_C)) else "0";
    icmp_ln143_2_fu_1442_p2 <= "1" when (sub_ln143_1_fu_1410_p2 = ap_const_lv12_C) else "0";
    icmp_ln143_3_fu_1471_p2 <= "1" when (unsigned(select_ln143_1_reg_2222) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln143_4_fu_1462_p2 <= "1" when (tmp_2_fu_1452_p4 = ap_const_lv8_0) else "0";
    icmp_ln143_fu_1404_p2 <= "1" when (trunc_ln143_1_fu_1348_p1 = ap_const_lv63_0) else "0";

    in_stream_read_assign_proc : process(grp_fft32_Pipeline_input_loop_fu_487_in_stream_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_stream_read <= grp_fft32_Pipeline_input_loop_fu_487_in_stream_read;
        else 
            in_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln10_2_fu_1099_p0 <= sext_ln10_4_fu_1083_p1(16 - 1 downto 0);
    mul_ln10_2_fu_1099_p1 <= sext_ln10_5_fu_1087_p1(16 - 1 downto 0);
    mul_ln10_4_fu_1139_p0 <= sext_ln10_8_reg_2044(16 - 1 downto 0);
    mul_ln10_4_fu_1139_p1 <= sext_ln10_9_fu_1135_p1(16 - 1 downto 0);
    mul_ln10_6_fu_1152_p0 <= sext_ln10_12_reg_2067(16 - 1 downto 0);
    mul_ln10_6_fu_1152_p1 <= sext_ln10_13_fu_1149_p1(16 - 1 downto 0);
    mul_ln10_fu_1601_p0 <= sext_ln10_reg_2265(16 - 1 downto 0);
    mul_ln10_fu_1601_p1 <= sext_ln10_1_fu_1598_p1(14 - 1 downto 0);
    mul_ln11_1_fu_1606_p0 <= sext_ln10_2_reg_2271(16 - 1 downto 0);
    mul_ln11_1_fu_1606_p1 <= sext_ln10_1_fu_1598_p1(14 - 1 downto 0);
    mul_ln11_2_fu_1105_p0 <= sext_ln10_6_fu_1091_p1(16 - 1 downto 0);
    mul_ln11_2_fu_1105_p1 <= sext_ln10_5_fu_1087_p1(16 - 1 downto 0);
    mul_ln11_4_fu_1144_p0 <= sext_ln10_10_reg_2050(16 - 1 downto 0);
    mul_ln11_4_fu_1144_p1 <= sext_ln10_9_fu_1135_p1(16 - 1 downto 0);
    mul_ln11_6_fu_1157_p0 <= sext_ln10_14_reg_2073(16 - 1 downto 0);
    mul_ln11_6_fu_1157_p1 <= sext_ln10_13_fu_1149_p1(16 - 1 downto 0);
    or_ln120_fu_966_p2 <= (icmp_ln120_reg_1916 or icmp_ln120_2_reg_1934);
    or_ln121_fu_1003_p2 <= (icmp_ln121_fu_993_p2 or icmp_ln121_1_fu_998_p2);
    or_ln127_fu_712_p2 <= (base_fu_704_p3 or ap_const_lv5_1);
    or_ln128_fu_1061_p2 <= (base_reg_1878 or ap_const_lv5_2);
    or_ln129_fu_1072_p2 <= (base_reg_1878 or ap_const_lv5_3);
    or_ln143_fu_1552_p2 <= (icmp_ln143_reg_2210 or icmp_ln143_2_reg_2228);
    out_stream_din <= grp_fft32_Pipeline_output_loop_fu_552_out_stream_din;

    out_stream_write_assign_proc : process(grp_fft32_Pipeline_output_loop_fu_552_out_stream_write, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            out_stream_write <= grp_fft32_Pipeline_output_loop_fu_552_out_stream_write;
        else 
            out_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    r_imag_10_fu_1278_p2 <= std_logic_vector(unsigned(ai1_fu_1236_p2) - unsigned(cr1_fu_1249_p2));
    r_imag_11_fu_1291_p2 <= std_logic_vector(unsigned(ai0_fu_1226_p2) - unsigned(ci0_fu_1245_p2));
    r_imag_12_fu_1303_p2 <= std_logic_vector(unsigned(cr1_fu_1249_p2) + unsigned(ai1_fu_1236_p2));
    r_real_10_fu_1271_p2 <= std_logic_vector(unsigned(ci1_fu_1253_p2) + unsigned(ar1_fu_1231_p2));
    r_real_11_fu_1285_p2 <= std_logic_vector(unsigned(ar0_fu_1221_p2) - unsigned(cr0_fu_1241_p2));
    r_real_12_fu_1297_p2 <= std_logic_vector(unsigned(ar1_fu_1231_p2) - unsigned(ci1_fu_1253_p2));
    select_ln120_1_fu_848_p3 <= 
        add_ln120_fu_836_p2 when (icmp_ln120_1_fu_830_p2(0) = '1') else 
        sub_ln120_2_fu_842_p2;
    select_ln120_2_fu_910_p3 <= 
        ap_const_lv16_FFFF when (angle_11_fu_903_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln120_fu_810_p3 <= 
        sub_ln120_fu_804_p2 when (tmp_3_fu_766_p3(0) = '1') else 
        zext_ln120_2_fu_800_p1;
    select_ln143_1_fu_1434_p3 <= 
        add_ln143_fu_1422_p2 when (icmp_ln143_1_fu_1416_p2(0) = '1') else 
        sub_ln143_2_fu_1428_p2;
    select_ln143_2_fu_1496_p3 <= 
        ap_const_lv16_FFFF when (angle_2_fu_1489_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln143_fu_1396_p3 <= 
        sub_ln143_fu_1390_p2 when (tmp_fu_1352_p3(0) = '1') else 
        zext_ln143_2_fu_1386_p1;
        sext_ln10_10_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_imag_261_3_reg_418),28));

        sext_ln10_11_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stage1_imag_q1),28));

        sext_ln10_12_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_real_330_3_reg_438),28));

        sext_ln10_13_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_real_3_load_reg_2062),28));

        sext_ln10_14_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_imag_362_3_reg_408),28));

        sext_ln10_15_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stage1_imag_q0),28));

        sext_ln10_1_fu_1598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outcos_reg_2260),28));

    sext_ln10_2_fu_1590_p0 <= stage2_imag_q0;
        sext_ln10_2_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_2_fu_1590_p0),28));

        sext_ln10_3_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_generic_sincos_16_4_s_fu_545_ap_return_0),28));

        sext_ln10_4_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_real_128_3_reg_458),28));

        sext_ln10_5_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_588),28));

        sext_ln10_6_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_imag_160_3_reg_428),28));

        sext_ln10_7_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_593),28));

        sext_ln10_8_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_real_229_3_reg_448),28));

        sext_ln10_9_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_588),28));

    sext_ln10_fu_1586_p0 <= stage2_real_q0;
        sext_ln10_fu_1586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln10_fu_1586_p0),28));

        sext_ln120_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln120_1_reg_1928),32));

    sext_ln120cast_fu_926_p1 <= sext_ln120_fu_882_p1(16 - 1 downto 0);
        sext_ln121_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_generic_sincos_16_4_s_fu_545_ap_return_1),16));

        sext_ln122_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_generic_sincos_16_4_s_fu_545_ap_return_0),16));

        sext_ln143_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln143_1_reg_2222),32));

    sext_ln143cast_fu_1512_p1 <= sext_ln143_fu_1468_p1(16 - 1 downto 0);
    shl_ln120_fu_930_p2 <= std_logic_vector(shift_left(unsigned(angle_9_reg_1940),to_integer(unsigned('0' & sext_ln120cast_fu_926_p1(16-1 downto 0)))));
    shl_ln143_fu_1516_p2 <= std_logic_vector(shift_left(unsigned(angle_reg_2234),to_integer(unsigned('0' & sext_ln143cast_fu_1512_p1(16-1 downto 0)))));

    stage0_imag_address0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_imag_address0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_address0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_address0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_imag_address0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_imag_address0 <= grp_fft32_Pipeline_3_fu_495_stage0_imag_address0;
        else 
            stage0_imag_address0 <= "XXXXX";
        end if; 
    end process;


    stage0_imag_ce0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_imag_ce0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_ce0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_ce0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_imag_ce0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_imag_ce0 <= grp_fft32_Pipeline_3_fu_495_stage0_imag_ce0;
        else 
            stage0_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_imag_ce1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_ce1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_ce1;
        else 
            stage0_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_imag_d0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_imag_d0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_d0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_d0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_imag_d0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_imag_d0 <= grp_fft32_Pipeline_3_fu_495_stage0_imag_d0;
        else 
            stage0_imag_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_imag_we0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_imag_we0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_we0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_we0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_imag_we0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_imag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_imag_we0 <= grp_fft32_Pipeline_3_fu_495_stage0_imag_we0;
        else 
            stage0_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_imag_we1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_imag_we1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_imag_we1;
        else 
            stage0_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_real_address0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_real_address0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_address0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_address0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_real_address0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_real_address0 <= grp_fft32_Pipeline_3_fu_495_stage0_real_address0;
        else 
            stage0_real_address0 <= "XXXXX";
        end if; 
    end process;


    stage0_real_ce0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_real_ce0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_ce0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_ce0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_real_ce0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_real_ce0 <= grp_fft32_Pipeline_3_fu_495_stage0_real_ce0;
        else 
            stage0_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_real_ce1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_ce1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_ce1;
        else 
            stage0_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_real_d0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_real_d0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_d0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_d0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_real_d0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_real_d0 <= grp_fft32_Pipeline_3_fu_495_stage0_real_d0;
        else 
            stage0_real_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_real_we0_assign_proc : process(grp_fft32_Pipeline_3_fu_495_stage0_real_we0, grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_we0, grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_we0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stage0_real_we0 <= grp_fft32_Pipeline_bit_rev_assign_loop_fu_513_stage0_real_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage0_real_we0 <= grp_fft32_Pipeline_3_fu_495_stage0_real_we0;
        else 
            stage0_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_real_we1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage0_real_we1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage0_real_we1;
        else 
            stage0_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_imag_address0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state17, zext_ln127_fu_718_p1, zext_ln129_fu_1077_p1, grp_fft32_Pipeline_5_fu_501_stage1_imag_address0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            stage1_imag_address0 <= zext_ln129_fu_1077_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            stage1_imag_address0 <= zext_ln127_fu_718_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_address0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_imag_address0 <= grp_fft32_Pipeline_5_fu_501_stage1_imag_address0;
        else 
            stage1_imag_address0 <= "XXXXX";
        end if; 
    end process;


    stage1_imag_address1_assign_proc : process(ap_CS_fsm_state48, zext_ln128_fu_1066_p1, zext_ln126_fu_1162_p1, ap_CS_fsm_state51, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            stage1_imag_address1 <= zext_ln126_fu_1162_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            stage1_imag_address1 <= zext_ln128_fu_1066_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_address1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_address1;
        else 
            stage1_imag_address1 <= "XXXXX";
        end if; 
    end process;


    stage1_imag_ce0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state17, grp_fft32_Pipeline_5_fu_501_stage1_imag_ce0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            stage1_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_ce0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_imag_ce0 <= grp_fft32_Pipeline_5_fu_501_stage1_imag_ce0;
        else 
            stage1_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_imag_ce1_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state51, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            stage1_imag_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_ce1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_ce1;
        else 
            stage1_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_imag_d0_assign_proc : process(grp_fft32_Pipeline_5_fu_501_stage1_imag_d0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_d0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_imag_d0 <= grp_fft32_Pipeline_5_fu_501_stage1_imag_d0;
        else 
            stage1_imag_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_imag_we0_assign_proc : process(grp_fft32_Pipeline_5_fu_501_stage1_imag_we0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_we0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_imag_we0 <= grp_fft32_Pipeline_5_fu_501_stage1_imag_we0;
        else 
            stage1_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_imag_we1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_imag_we1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_imag_we1;
        else 
            stage1_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_real_address0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state17, zext_ln127_fu_718_p1, zext_ln129_fu_1077_p1, grp_fft32_Pipeline_5_fu_501_stage1_real_address0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            stage1_real_address0 <= zext_ln129_fu_1077_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            stage1_real_address0 <= zext_ln127_fu_718_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_address0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_real_address0 <= grp_fft32_Pipeline_5_fu_501_stage1_real_address0;
        else 
            stage1_real_address0 <= "XXXXX";
        end if; 
    end process;


    stage1_real_address1_assign_proc : process(ap_CS_fsm_state48, zext_ln128_fu_1066_p1, zext_ln126_fu_1162_p1, ap_CS_fsm_state51, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            stage1_real_address1 <= zext_ln126_fu_1162_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            stage1_real_address1 <= zext_ln128_fu_1066_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_address1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_address1;
        else 
            stage1_real_address1 <= "XXXXX";
        end if; 
    end process;


    stage1_real_ce0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state17, grp_fft32_Pipeline_5_fu_501_stage1_real_ce0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            stage1_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_ce0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_real_ce0 <= grp_fft32_Pipeline_5_fu_501_stage1_real_ce0;
        else 
            stage1_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_real_ce1_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state51, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            stage1_real_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_ce1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_ce1;
        else 
            stage1_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_real_d0_assign_proc : process(grp_fft32_Pipeline_5_fu_501_stage1_real_d0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_d0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_real_d0 <= grp_fft32_Pipeline_5_fu_501_stage1_real_d0;
        else 
            stage1_real_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_real_we0_assign_proc : process(grp_fft32_Pipeline_5_fu_501_stage1_real_we0, grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_we0 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage1_real_we0 <= grp_fft32_Pipeline_5_fu_501_stage1_real_we0;
        else 
            stage1_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_real_we1_assign_proc : process(grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stage1_real_we1 <= grp_fft32_Pipeline_stage1_loop_fu_521_stage1_real_we1;
        else 
            stage1_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_imag_address0_assign_proc : process(zext_ln127_reg_1885, zext_ln129_reg_2002, ap_CS_fsm_state53, ap_CS_fsm_state77, b_imag_reg_2255, grp_fft32_Pipeline_7_fu_507_stage2_imag_address0, grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_address0, ap_CS_fsm_state6, ap_CS_fsm_state82, ap_CS_fsm_state54, zext_ln147_fu_1580_p1, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_imag_address0 <= b_imag_reg_2255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            stage2_imag_address0 <= zext_ln147_fu_1580_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_imag_address0 <= zext_ln129_reg_2002(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_imag_address0 <= zext_ln127_reg_1885(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            stage2_imag_address0 <= grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_imag_address0 <= grp_fft32_Pipeline_7_fu_507_stage2_imag_address0;
        else 
            stage2_imag_address0 <= "XXXXX";
        end if; 
    end process;


    stage2_imag_address1_assign_proc : process(zext_ln128_reg_1986, zext_ln126_reg_2105, ap_CS_fsm_state53, a_imag_reg_2195, ap_CS_fsm_state54, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            stage2_imag_address1 <= a_imag_reg_2195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_imag_address1 <= zext_ln128_reg_1986(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_imag_address1 <= zext_ln126_reg_2105(5 - 1 downto 0);
        else 
            stage2_imag_address1 <= "XXXXX";
        end if; 
    end process;


    stage2_imag_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state77, grp_fft32_Pipeline_7_fu_507_stage2_imag_ce0, grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_ce0, ap_CS_fsm_state6, ap_CS_fsm_state82, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            stage2_imag_ce0 <= grp_fft32_Pipeline_output_loop_fu_552_stage2_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_imag_ce0 <= grp_fft32_Pipeline_7_fu_507_stage2_imag_ce0;
        else 
            stage2_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_imag_ce1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_imag_ce1 <= ap_const_logic_1;
        else 
            stage2_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_imag_d0_assign_proc : process(ap_CS_fsm_state53, r_imag_12_reg_2172, grp_fft32_Pipeline_7_fu_507_stage2_imag_d0, ap_CS_fsm_state6, ap_CS_fsm_state54, ap_CS_fsm_state81, r_imag_10_fu_1278_p2, sub_ln48_fu_1650_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_imag_d0 <= sub_ln48_fu_1650_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_imag_d0 <= r_imag_12_reg_2172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_imag_d0 <= r_imag_10_fu_1278_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_imag_d0 <= grp_fft32_Pipeline_7_fu_507_stage2_imag_d0;
        else 
            stage2_imag_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage2_imag_d1_assign_proc : process(ap_CS_fsm_state53, r_imag_11_reg_2162, ap_CS_fsm_state54, ap_CS_fsm_state81, a_imag_2_fu_1264_p2, add_ln46_fu_1636_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_imag_d1 <= add_ln46_fu_1636_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_imag_d1 <= r_imag_11_reg_2162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_imag_d1 <= a_imag_2_fu_1264_p2;
        else 
            stage2_imag_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage2_imag_we0_assign_proc : process(ap_CS_fsm_state53, grp_fft32_Pipeline_7_fu_507_stage2_imag_we0, ap_CS_fsm_state6, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_imag_we0 <= grp_fft32_Pipeline_7_fu_507_stage2_imag_we0;
        else 
            stage2_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_imag_we1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_imag_we1 <= ap_const_logic_1;
        else 
            stage2_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_real_address0_assign_proc : process(zext_ln127_reg_1885, zext_ln129_reg_2002, ap_CS_fsm_state53, b_real_reg_2250, ap_CS_fsm_state77, grp_fft32_Pipeline_7_fu_507_stage2_real_address0, grp_fft32_Pipeline_output_loop_fu_552_stage2_real_address0, ap_CS_fsm_state6, ap_CS_fsm_state82, ap_CS_fsm_state54, zext_ln147_fu_1580_p1, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_real_address0 <= b_real_reg_2250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            stage2_real_address0 <= zext_ln147_fu_1580_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_real_address0 <= zext_ln129_reg_2002(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_real_address0 <= zext_ln127_reg_1885(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            stage2_real_address0 <= grp_fft32_Pipeline_output_loop_fu_552_stage2_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_real_address0 <= grp_fft32_Pipeline_7_fu_507_stage2_real_address0;
        else 
            stage2_real_address0 <= "XXXXX";
        end if; 
    end process;


    stage2_real_address1_assign_proc : process(zext_ln128_reg_1986, zext_ln126_reg_2105, ap_CS_fsm_state53, a_real_reg_2190, ap_CS_fsm_state54, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            stage2_real_address1 <= a_real_reg_2190;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_real_address1 <= zext_ln128_reg_1986(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_real_address1 <= zext_ln126_reg_2105(5 - 1 downto 0);
        else 
            stage2_real_address1 <= "XXXXX";
        end if; 
    end process;


    stage2_real_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state77, grp_fft32_Pipeline_7_fu_507_stage2_real_ce0, grp_fft32_Pipeline_output_loop_fu_552_stage2_real_ce0, ap_CS_fsm_state6, ap_CS_fsm_state82, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            stage2_real_ce0 <= grp_fft32_Pipeline_output_loop_fu_552_stage2_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_real_ce0 <= grp_fft32_Pipeline_7_fu_507_stage2_real_ce0;
        else 
            stage2_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_real_ce1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_real_ce1 <= ap_const_logic_1;
        else 
            stage2_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_real_d0_assign_proc : process(ap_CS_fsm_state53, r_real_12_reg_2167, grp_fft32_Pipeline_7_fu_507_stage2_real_d0, ap_CS_fsm_state6, ap_CS_fsm_state54, r_real_10_fu_1271_p2, ap_CS_fsm_state81, sub_ln47_fu_1643_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_real_d0 <= sub_ln47_fu_1643_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_real_d0 <= r_real_12_reg_2167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_real_d0 <= r_real_10_fu_1271_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_real_d0 <= grp_fft32_Pipeline_7_fu_507_stage2_real_d0;
        else 
            stage2_real_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage2_real_d1_assign_proc : process(r_real_11_reg_2157, ap_CS_fsm_state53, ap_CS_fsm_state54, a_real_2_fu_1257_p2, ap_CS_fsm_state81, add_ln45_fu_1629_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            stage2_real_d1 <= add_ln45_fu_1629_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            stage2_real_d1 <= r_real_11_reg_2157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            stage2_real_d1 <= a_real_2_fu_1257_p2;
        else 
            stage2_real_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage2_real_we0_assign_proc : process(ap_CS_fsm_state53, grp_fft32_Pipeline_7_fu_507_stage2_real_we0, ap_CS_fsm_state6, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stage2_real_we0 <= grp_fft32_Pipeline_7_fu_507_stage2_real_we0;
        else 
            stage2_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage2_real_we1_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            stage2_real_we1 <= ap_const_logic_1;
        else 
            stage2_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln120_1_fu_824_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln120_fu_784_p1));
    sub_ln120_2_fu_842_p2 <= std_logic_vector(unsigned(ap_const_lv12_C) - unsigned(sub_ln120_1_fu_824_p2));
    sub_ln120_fu_804_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln120_2_fu_800_p1));
    sub_ln143_1_fu_1410_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln143_fu_1370_p1));
    sub_ln143_2_fu_1428_p2 <= std_logic_vector(unsigned(ap_const_lv12_C) - unsigned(sub_ln143_1_fu_1410_p2));
    sub_ln143_fu_1390_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln143_2_fu_1386_p1));
    sub_ln47_fu_1643_p2 <= std_logic_vector(unsigned(stage2_real_q1) - unsigned(t_real_fu_1611_p4));
    sub_ln48_fu_1650_p2 <= std_logic_vector(unsigned(stage2_imag_q1) - unsigned(t_imag_fu_1620_p4));
    t_imag_fu_1620_p4 <= grp_fu_1713_p3(27 downto 12);
    t_real_fu_1611_p4 <= grp_fu_1705_p3(27 downto 12);
    tmp_1_fu_774_p4 <= bitcast_ln724_1_fu_758_p1(62 downto 52);
    tmp_2_fu_1452_p4 <= select_ln143_1_fu_1434_p3(11 downto 4);
    tmp_3_fu_766_p3 <= bitcast_ln724_1_fu_758_p1(63 downto 63);
    tmp_5_fu_866_p4 <= select_ln120_1_fu_848_p3(11 downto 4);
    tmp_fu_1352_p3 <= bitcast_ln724_fu_1344_p1(63 downto 63);
    tmp_s_fu_1360_p4 <= bitcast_ln724_fu_1344_p1(62 downto 52);
    trunc_ln111_fu_701_p1 <= block_1_fu_146(3 - 1 downto 0);
    trunc_ln120_1_fu_762_p1 <= bitcast_ln724_1_fu_758_p1(63 - 1 downto 0);
    trunc_ln120_2_fu_788_p1 <= bitcast_ln724_1_fu_758_p1(52 - 1 downto 0);
    trunc_ln120_fu_686_p1 <= k_1_reg_468(2 - 1 downto 0);
    trunc_ln143_1_fu_1348_p1 <= bitcast_ln724_fu_1344_p1(63 - 1 downto 0);
    trunc_ln143_2_fu_1374_p1 <= bitcast_ln724_fu_1344_p1(52 - 1 downto 0);
    trunc_ln143_fu_1330_p1 <= k_fu_230(4 - 1 downto 0);
    w_imag_3_7_fu_1045_p3 <= 
        sext_ln122_fu_1033_p1 when (icmp_ln121_1_fu_998_p2(0) = '1') else 
        w_imag_261_3_reg_418;
    w_imag_3_8_fu_1053_p3 <= 
        sext_ln122_fu_1033_p1 when (icmp_ln121_fu_993_p2(0) = '1') else 
        w_imag_160_3_reg_428;
    w_imag_3_fu_1037_p3 <= 
        w_imag_362_3_reg_408 when (or_ln121_fu_1003_p2(0) = '1') else 
        sext_ln122_fu_1033_p1;
    w_real_3_7_fu_1017_p3 <= 
        sext_ln121_fu_989_p1 when (icmp_ln121_1_fu_998_p2(0) = '1') else 
        w_real_229_3_reg_448;
    w_real_3_8_fu_1025_p3 <= 
        sext_ln121_fu_989_p1 when (icmp_ln121_fu_993_p2(0) = '1') else 
        w_real_128_3_reg_458;
    w_real_3_fu_1009_p3 <= 
        w_real_330_3_reg_438 when (or_ln121_fu_1003_p2(0) = '1') else 
        sext_ln121_fu_989_p1;
    xor_ln120_1_fu_970_p2 <= (or_ln120_fu_966_p2 xor ap_const_lv1_1);
    xor_ln120_fu_949_p2 <= (icmp_ln120_reg_1916 xor ap_const_lv1_1);
    xor_ln143_1_fu_1556_p2 <= (or_ln143_fu_1552_p2 xor ap_const_lv1_1);
    xor_ln143_fu_1535_p2 <= (icmp_ln143_reg_2210 xor ap_const_lv1_1);
    xor_ln147_fu_1575_p2 <= (k_2_reg_2177 xor ap_const_lv5_10);
    zext_ln120_1_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln120_fu_686_p1),32));
    zext_ln120_2_cast_fu_792_p3 <= (ap_const_lv1_1 & trunc_ln120_2_fu_788_p1);
    zext_ln120_2_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln120_2_cast_fu_792_p3),54));
    zext_ln120_3_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln120_fu_882_p1),54));
    zext_ln120_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_774_p4),12));
    zext_ln126_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_reg_1878),64));
    zext_ln127_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln127_fu_712_p2),64));
    zext_ln128_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln128_fu_1061_p2),64));
    zext_ln129_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln129_fu_1072_p2),64));
    zext_ln141_fu_1312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_230),64));
    zext_ln143_1_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln143_fu_1330_p1),32));
    zext_ln143_2_cast_fu_1378_p3 <= (ap_const_lv1_1 & trunc_ln143_2_fu_1374_p1);
    zext_ln143_2_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln143_2_cast_fu_1378_p3),54));
    zext_ln143_3_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln143_fu_1468_p1),54));
    zext_ln143_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1360_p4),12));
    zext_ln147_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln147_fu_1575_p2),64));
end behav;
