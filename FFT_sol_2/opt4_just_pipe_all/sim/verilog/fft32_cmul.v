// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_cmul (
        ap_clk,
        ap_rst,
        x_real_val,
        x_imag_val,
        w_real_val,
        w_imag_val,
        ap_return_0,
        ap_return_1,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] x_real_val;
input  [15:0] x_imag_val;
input  [13:0] w_real_val;
input  [13:0] w_imag_val;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
input   ap_ce;

reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

wire  signed [27:0] sext_ln10_fu_44_p1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire  signed [27:0] sext_ln10_5_fu_52_p1;
wire  signed [27:0] sext_ln10_6_fu_56_p1;
wire   [27:0] mul_ln10_fu_60_p2;
reg   [27:0] mul_ln10_reg_134;
reg  signed [27:0] mul_ln10_reg_134_pp0_iter1_reg;
wire   [27:0] mul_ln11_fu_66_p2;
reg   [27:0] mul_ln11_reg_139;
reg  signed [27:0] mul_ln11_reg_139_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
wire  signed [13:0] mul_ln10_fu_60_p0;
wire  signed [15:0] mul_ln10_fu_60_p1;
wire  signed [27:0] sext_ln10_4_fu_48_p1;
wire  signed [13:0] mul_ln11_fu_66_p0;
wire  signed [15:0] mul_ln11_fu_66_p1;
wire  signed [27:0] grp_fu_102_p3;
wire  signed [27:0] grp_fu_110_p3;
wire  signed [13:0] grp_fu_102_p0;
wire  signed [15:0] grp_fu_102_p1;
wire  signed [13:0] grp_fu_110_p0;
wire  signed [15:0] grp_fu_110_p1;
reg    grp_fu_102_ce;
reg    grp_fu_110_ce;
reg    ap_ce_reg;
reg   [15:0] x_real_val_int_reg;
reg   [15:0] x_imag_val_int_reg;
reg   [13:0] w_real_val_int_reg;
reg   [13:0] w_imag_val_int_reg;
reg   [15:0] ap_return_0_int_reg;
reg   [15:0] ap_return_1_int_reg;

fft32_mul_14s_16s_28_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_14s_16s_28_1_0_U18(
    .din0(mul_ln10_fu_60_p0),
    .din1(mul_ln10_fu_60_p1),
    .dout(mul_ln10_fu_60_p2)
);

fft32_mul_14s_16s_28_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_14s_16s_28_1_0_U19(
    .din0(mul_ln11_fu_66_p0),
    .din1(mul_ln11_fu_66_p1),
    .dout(mul_ln11_fu_66_p2)
);

fft32_mac_mulsub_14s_16s_28s_28_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_mulsub_14s_16s_28s_28_4_0_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_102_p0),
    .din1(grp_fu_102_p1),
    .din2(mul_ln10_reg_134_pp0_iter1_reg),
    .ce(grp_fu_102_ce),
    .dout(grp_fu_102_p3)
);

fft32_mac_muladd_14s_16s_28s_28_4_0 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_14s_16s_28s_28_4_0_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .din2(mul_ln11_reg_139_pp0_iter1_reg),
    .ce(grp_fu_110_ce),
    .dout(grp_fu_110_p3)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= {{grp_fu_102_p3[27:12]}};
        ap_return_1_int_reg <= {{grp_fu_110_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        mul_ln10_reg_134 <= mul_ln10_fu_60_p2;
        mul_ln10_reg_134_pp0_iter1_reg <= mul_ln10_reg_134;
        mul_ln11_reg_139 <= mul_ln11_fu_66_p2;
        mul_ln11_reg_139_pp0_iter1_reg <= mul_ln11_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        w_imag_val_int_reg <= w_imag_val;
        w_real_val_int_reg <= w_real_val;
        x_imag_val_int_reg <= x_imag_val;
        x_real_val_int_reg <= x_real_val;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = {{grp_fu_102_p3[27:12]}};
    end else begin
        ap_return_0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = {{grp_fu_110_p3[27:12]}};
    end else begin
        ap_return_1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_102_ce = 1'b1;
    end else begin
        grp_fu_102_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_110_ce = 1'b1;
    end else begin
        grp_fu_110_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign grp_fu_102_p0 = sext_ln10_5_fu_52_p1;

assign grp_fu_102_p1 = sext_ln10_6_fu_56_p1;

assign grp_fu_110_p0 = sext_ln10_fu_44_p1;

assign grp_fu_110_p1 = sext_ln10_6_fu_56_p1;

assign mul_ln10_fu_60_p0 = sext_ln10_fu_44_p1;

assign mul_ln10_fu_60_p1 = sext_ln10_4_fu_48_p1;

assign mul_ln11_fu_66_p0 = sext_ln10_5_fu_52_p1;

assign mul_ln11_fu_66_p1 = sext_ln10_4_fu_48_p1;

assign sext_ln10_4_fu_48_p1 = $signed(x_real_val_int_reg);

assign sext_ln10_5_fu_52_p1 = $signed(w_imag_val_int_reg);

assign sext_ln10_6_fu_56_p1 = $signed(x_imag_val_int_reg);

assign sext_ln10_fu_44_p1 = $signed(w_real_val_int_reg);

endmodule //fft32_cmul
