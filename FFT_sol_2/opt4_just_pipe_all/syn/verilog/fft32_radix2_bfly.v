// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft32_radix2_bfly (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        a_real_read,
        a_imag_read,
        b_real_read,
        b_imag_read,
        w_real_val,
        w_imag_val,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] a_real_read;
input  [15:0] a_imag_read;
input  [15:0] b_real_read;
input  [15:0] b_imag_read;
input  [13:0] w_real_val;
input  [13:0] w_imag_val;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
wire  signed [27:0] sext_ln10_fu_60_p1;
reg  signed [27:0] sext_ln10_reg_160;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire  signed [27:0] sext_ln10_1_fu_64_p1;
reg  signed [27:0] sext_ln10_1_reg_165;
wire  signed [27:0] sext_ln10_2_fu_68_p1;
reg  signed [27:0] sext_ln10_2_reg_170;
wire  signed [27:0] sext_ln10_3_fu_72_p1;
reg  signed [27:0] sext_ln10_3_reg_176;
wire   [27:0] mul_ln10_fu_76_p2;
reg  signed [27:0] mul_ln10_reg_182;
reg   [15:0] a_imag_read_1_reg_187;
wire    ap_block_pp0_stage1_11001;
reg   [15:0] a_imag_read_1_reg_187_pp0_iter1_reg;
reg   [15:0] a_real_read_1_reg_193;
reg   [15:0] a_real_read_1_reg_193_pp0_iter1_reg;
wire   [27:0] mul_ln11_1_fu_82_p2;
reg  signed [27:0] mul_ln11_1_reg_199;
reg   [15:0] r_real_reg_204;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_port_reg_a_real_read;
reg   [15:0] ap_port_reg_a_imag_read;
wire    ap_block_pp0_stage0;
wire  signed [15:0] mul_ln11_1_fu_82_p0;
wire  signed [13:0] mul_ln11_1_fu_82_p1;
wire    ap_block_pp0_stage1;
wire  signed [27:0] grp_fu_146_p3;
wire  signed [27:0] grp_fu_154_p3;
wire   [15:0] r_imag_fu_95_p4;
wire   [15:0] add_ln45_fu_104_p2;
wire   [15:0] add_ln46_fu_108_p2;
wire   [15:0] sub_ln47_fu_113_p2;
wire   [15:0] sub_ln48_fu_117_p2;
wire  signed [15:0] grp_fu_154_p0;
wire  signed [13:0] grp_fu_154_p1;
reg    grp_fu_146_ce;
reg    grp_fu_154_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

fft32_mul_16s_14s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mul_16s_14s_28_1_1_U37(
    .din0(b_real_read),
    .din1(w_real_val),
    .dout(mul_ln10_fu_76_p2)
);

fft32_mul_16s_14s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 28 ))
mul_16s_14s_28_1_1_U38(
    .din0(mul_ln11_1_fu_82_p0),
    .din1(mul_ln11_1_fu_82_p1),
    .dout(mul_ln11_1_fu_82_p2)
);

fft32_mac_mulsub_16s_14s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_mulsub_16s_14s_28s_28_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_imag_read),
    .din1(w_imag_val),
    .din2(mul_ln10_reg_182),
    .ce(grp_fu_146_ce),
    .dout(grp_fu_146_p3)
);

fft32_mac_muladd_16s_14s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_14s_28s_28_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_154_p0),
    .din1(grp_fu_154_p1),
    .din2(mul_ln11_1_reg_199),
    .ce(grp_fu_154_ce),
    .dout(grp_fu_154_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_imag_read_1_reg_187 <= ap_port_reg_a_imag_read;
        a_imag_read_1_reg_187_pp0_iter1_reg <= a_imag_read_1_reg_187;
        a_real_read_1_reg_193 <= ap_port_reg_a_real_read;
        a_real_read_1_reg_193_pp0_iter1_reg <= a_real_read_1_reg_193;
        mul_ln11_1_reg_199 <= mul_ln11_1_fu_82_p2;
        r_real_reg_204 <= {{grp_fu_146_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_a_imag_read <= a_imag_read;
        ap_port_reg_a_real_read <= a_real_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln10_reg_182 <= mul_ln10_fu_76_p2;
        sext_ln10_1_reg_165 <= sext_ln10_1_fu_64_p1;
        sext_ln10_2_reg_170 <= sext_ln10_2_fu_68_p1;
        sext_ln10_3_reg_176 <= sext_ln10_3_fu_72_p1;
        sext_ln10_reg_160 <= sext_ln10_fu_60_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
        grp_fu_146_ce = 1'b1;
    end else begin
        grp_fu_146_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
        grp_fu_154_ce = 1'b1;
    end else begin
        grp_fu_154_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_104_p2 = (r_real_reg_204 + a_real_read_1_reg_193_pp0_iter1_reg);

assign add_ln46_fu_108_p2 = (r_imag_fu_95_p4 + a_imag_read_1_reg_187_pp0_iter1_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = add_ln45_fu_104_p2;

assign ap_return_1 = add_ln46_fu_108_p2;

assign ap_return_2 = sub_ln47_fu_113_p2;

assign ap_return_3 = sub_ln48_fu_117_p2;

assign grp_fu_154_p0 = sext_ln10_reg_160;

assign grp_fu_154_p1 = sext_ln10_3_reg_176;

assign mul_ln11_1_fu_82_p0 = sext_ln10_2_reg_170;

assign mul_ln11_1_fu_82_p1 = sext_ln10_1_reg_165;

assign r_imag_fu_95_p4 = {{grp_fu_154_p3[27:12]}};

assign sext_ln10_1_fu_64_p1 = $signed(w_real_val);

assign sext_ln10_2_fu_68_p1 = $signed(b_imag_read);

assign sext_ln10_3_fu_72_p1 = $signed(w_imag_val);

assign sext_ln10_fu_60_p1 = $signed(b_real_read);

assign sub_ln47_fu_113_p2 = (a_real_read_1_reg_193_pp0_iter1_reg - r_real_reg_204);

assign sub_ln48_fu_117_p2 = (a_imag_read_1_reg_187_pp0_iter1_reg - r_imag_fu_95_p4);

endmodule //fft32_radix2_bfly
