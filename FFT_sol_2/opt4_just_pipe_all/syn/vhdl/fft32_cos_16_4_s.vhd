-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft32_cos_16_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x_val : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of fft32_cos_16_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv35_145F30 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000101000101111100110000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1921F : STD_LOGIC_VECTOR (17 downto 0) := "011001001000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv18_DBC1 : STD_LOGIC_VECTOR (17 downto 0) := "001101101111000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal x_fu_64_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_reg_191 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln68_fu_70_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln68_reg_196 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln68_reg_196_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal k_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln251_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_212_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal z_fu_150_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal z_reg_222 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln266_fu_161_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln266_reg_227 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start : STD_LOGIC;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_done : STD_LOGIC;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_idle : STD_LOGIC;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ready : STD_LOGIC;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ce : STD_LOGIC;
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call18 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call18 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2_ignore_call18 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call18 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4_ignore_call18 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5_ignore_call18 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6_ignore_call18 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7_ignore_call18 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8_ignore_call18 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9_ignore_call18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10_ignore_call18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp43 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call18 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call18 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2_ignore_call18 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3_ignore_call18 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4_ignore_call18 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5_ignore_call18 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6_ignore_call18 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7_ignore_call18 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8_ignore_call18 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9_ignore_call18 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp44 : BOOLEAN;
    signal ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln280_fu_165_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_phi_reg_pp0_iter10_agg_result_0_in_in_reg_50 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln64_fu_77_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln64_fu_77_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln64_fu_77_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_181_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_fu_108_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln68_2_fu_117_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_127_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln254_fu_121_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_140_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln257_fu_136_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_181_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_181_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln64_fu_77_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fft32_cordic_circ_apfixed_18_3_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_read : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component fft32_mul_14ns_22ns_35_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component fft32_mac_muladd_2ns_16ns_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_cordic_circ_apfixed_18_3_0_s_fu_59 : component fft32_cordic_circ_apfixed_18_3_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start,
        ap_done => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_done,
        ap_idle => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_idle,
        ap_ready => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ready,
        ap_ce => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ce,
        z_read => z_reg_222,
        ap_return_0 => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_return_0,
        ap_return_1 => grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_return_1);

    mul_14ns_22ns_35_1_1_U10 : component fft32_mul_14ns_22ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 22,
        dout_WIDTH => 35)
    port map (
        din0 => mul_ln64_fu_77_p0,
        din1 => mul_ln64_fu_77_p1,
        dout => mul_ln64_fu_77_p2);

    mac_muladd_2ns_16ns_18ns_18_4_1_U11 : component fft32_mac_muladd_2ns_16ns_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        din2 => grp_fu_181_p2,
        ce => grp_fu_181_ce,
        dout => grp_fu_181_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln251_reg_212 <= icmp_ln251_fu_96_p2;
                icmp_ln251_reg_212_pp0_iter2_reg <= icmp_ln251_reg_212;
                icmp_ln251_reg_212_pp0_iter3_reg <= icmp_ln251_reg_212_pp0_iter2_reg;
                icmp_ln251_reg_212_pp0_iter4_reg <= icmp_ln251_reg_212_pp0_iter3_reg;
                icmp_ln251_reg_212_pp0_iter5_reg <= icmp_ln251_reg_212_pp0_iter4_reg;
                icmp_ln251_reg_212_pp0_iter6_reg <= icmp_ln251_reg_212_pp0_iter5_reg;
                icmp_ln251_reg_212_pp0_iter7_reg <= icmp_ln251_reg_212_pp0_iter6_reg;
                icmp_ln251_reg_212_pp0_iter8_reg <= icmp_ln251_reg_212_pp0_iter7_reg;
                icmp_ln251_reg_212_pp0_iter9_reg <= icmp_ln251_reg_212_pp0_iter8_reg;
                trunc_ln68_reg_196 <= trunc_ln68_fu_70_p1;
                trunc_ln68_reg_196_pp0_iter1_reg <= trunc_ln68_reg_196;
                x_reg_191 <= x_fu_64_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                k_reg_201 <= mul_ln64_fu_77_p2(34 downto 33);
                trunc_ln266_reg_227 <= trunc_ln266_fu_161_p1;
                z_reg_222 <= z_fu_150_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp43 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp44 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4_assign_proc : process(icmp_ln251_reg_212_pp0_iter9_reg, trunc_ln266_reg_227, sub_ln280_fu_165_p2, ap_phi_reg_pp0_iter10_agg_result_0_in_in_reg_50)
    begin
        if ((icmp_ln251_reg_212_pp0_iter9_reg = ap_const_lv1_0)) then 
            ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4 <= trunc_ln266_reg_227;
        elsif ((icmp_ln251_reg_212_pp0_iter9_reg = ap_const_lv1_1)) then 
            ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4 <= sub_ln280_fu_165_p2;
        else 
            ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4 <= ap_phi_reg_pp0_iter10_agg_result_0_in_in_reg_50;
        end if; 
    end process;

    ap_phi_reg_pp0_iter10_agg_result_0_in_in_reg_50 <= "XXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_agg_result_0_in_in_phi_fu_53_p4(16 downto 3);

    grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp43, ap_block_pp0_stage1_11001_ignoreCallOp44)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp44) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp43) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
            grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ce <= ap_const_logic_1;
        else 
            grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start <= grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_start_reg;

    grp_fu_181_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_ce, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
            grp_fu_181_ce <= ap_const_logic_1;
        else 
            grp_fu_181_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_181_p0 <= grp_fu_181_p00(2 - 1 downto 0);
    grp_fu_181_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_201),18));
    grp_fu_181_p1 <= ap_const_lv18_DBC1(16 - 1 downto 0);
    grp_fu_181_p2 <= (trunc_ln68_reg_196_pp0_iter1_reg & ap_const_lv5_0);
    icmp_ln251_fu_96_p2 <= "1" when (k_reg_201 = ap_const_lv2_1) else "0";
    mul_ln64_fu_77_p0 <= mul_ln64_fu_77_p00(14 - 1 downto 0);
    mul_ln64_fu_77_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_191),35));
    mul_ln64_fu_77_p1 <= ap_const_lv35_145F30(22 - 1 downto 0);
    r_fu_108_p4 <= grp_fu_181_p3(17 downto 1);
    sub_ln254_fu_121_p2 <= std_logic_vector(unsigned(ap_const_lv18_1921F) - unsigned(zext_ln68_2_fu_117_p1));
    sub_ln280_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(trunc_ln266_reg_227));
    tmp_3_fu_127_p4 <= grp_fu_181_p3(17 downto 2);
    tmp_4_fu_140_p4 <= sub_ln254_fu_121_p2(17 downto 1);
    trunc_ln266_fu_161_p1 <= grp_cordic_circ_apfixed_18_3_0_s_fu_59_ap_return_0(17 - 1 downto 0);
    trunc_ln68_fu_70_p1 <= x_fu_64_p2(13 - 1 downto 0);
    x_fu_64_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(x_val));
    z_fu_150_p3 <= 
        tmp_4_fu_140_p4 when (icmp_ln251_reg_212_pp0_iter2_reg(0) = '1') else 
        zext_ln257_fu_136_p1;
    zext_ln257_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_127_p4),17));
    zext_ln68_2_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_108_p4),18));
end behav;
