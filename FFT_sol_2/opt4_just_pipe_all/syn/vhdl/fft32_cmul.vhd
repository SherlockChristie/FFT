-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft32_cmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_real_val : IN STD_LOGIC_VECTOR (15 downto 0);
    x_imag_val : IN STD_LOGIC_VECTOR (15 downto 0);
    w_real_val : IN STD_LOGIC_VECTOR (13 downto 0);
    w_imag_val : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of fft32_cmul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal sext_ln10_fu_44_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln10_5_fu_52_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln10_6_fu_56_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_fu_60_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_reg_134 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln10_reg_134_pp0_iter1_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_fu_66_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_reg_139 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_reg_139_pp0_iter1_reg : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln10_fu_60_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln10_fu_60_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln10_4_fu_48_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln11_fu_66_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln11_fu_66_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_102_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_110_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_102_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_102_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_102_ce : STD_LOGIC;
    signal grp_fu_110_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal x_real_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x_imag_val_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w_real_val_int_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal w_imag_val_int_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (15 downto 0);

    component fft32_mul_14s_16s_28_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_mulsub_14s_16s_28s_28_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component fft32_mac_muladd_14s_16s_28s_28_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    mul_14s_16s_28_1_0_U18 : component fft32_mul_14s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln10_fu_60_p0,
        din1 => mul_ln10_fu_60_p1,
        dout => mul_ln10_fu_60_p2);

    mul_14s_16s_28_1_0_U19 : component fft32_mul_14s_16s_28_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_fu_66_p0,
        din1 => mul_ln11_fu_66_p1,
        dout => mul_ln11_fu_66_p2);

    mac_mulsub_14s_16s_28s_28_4_0_U20 : component fft32_mac_mulsub_14s_16s_28s_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_102_p0,
        din1 => grp_fu_102_p1,
        din2 => mul_ln10_reg_134_pp0_iter1_reg,
        ce => grp_fu_102_ce,
        dout => grp_fu_102_p3);

    mac_muladd_14s_16s_28s_28_4_0_U21 : component fft32_mac_muladd_14s_16s_28s_28_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_110_p0,
        din1 => grp_fu_110_p1,
        din2 => mul_ln11_reg_139_pp0_iter1_reg,
        ce => grp_fu_110_ce,
        dout => grp_fu_110_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= grp_fu_102_p3(27 downto 12);
                ap_return_1_int_reg <= grp_fu_110_p3(27 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                mul_ln10_reg_134 <= mul_ln10_fu_60_p2;
                mul_ln10_reg_134_pp0_iter1_reg <= mul_ln10_reg_134;
                mul_ln11_reg_139 <= mul_ln11_fu_66_p2;
                mul_ln11_reg_139_pp0_iter1_reg <= mul_ln11_reg_139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                w_imag_val_int_reg <= w_imag_val;
                w_real_val_int_reg <= w_real_val;
                x_imag_val_int_reg <= x_imag_val;
                x_real_val_int_reg <= x_real_val;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(grp_fu_102_p3, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= grp_fu_102_p3(27 downto 12);
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_fu_110_p3, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= grp_fu_110_p3(27 downto 12);
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_102_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_102_ce <= ap_const_logic_1;
        else 
            grp_fu_102_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_102_p0 <= sext_ln10_5_fu_52_p1(14 - 1 downto 0);
    grp_fu_102_p1 <= sext_ln10_6_fu_56_p1(16 - 1 downto 0);

    grp_fu_110_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_110_ce <= ap_const_logic_1;
        else 
            grp_fu_110_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_110_p0 <= sext_ln10_fu_44_p1(14 - 1 downto 0);
    grp_fu_110_p1 <= sext_ln10_6_fu_56_p1(16 - 1 downto 0);
    mul_ln10_fu_60_p0 <= sext_ln10_fu_44_p1(14 - 1 downto 0);
    mul_ln10_fu_60_p1 <= sext_ln10_4_fu_48_p1(16 - 1 downto 0);
    mul_ln11_fu_66_p0 <= sext_ln10_5_fu_52_p1(14 - 1 downto 0);
    mul_ln11_fu_66_p1 <= sext_ln10_4_fu_48_p1(16 - 1 downto 0);
        sext_ln10_4_fu_48_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_real_val_int_reg),28));

        sext_ln10_5_fu_52_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_imag_val_int_reg),28));

        sext_ln10_6_fu_56_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_imag_val_int_reg),28));

        sext_ln10_fu_44_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_real_val_int_reg),28));

end behav;
