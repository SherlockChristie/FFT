-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z : IN STD_LOGIC_VECTOR (16 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (16 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv18_4DBA : STD_LOGIC_VECTOR (17 downto 0) := "000100110110111010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cordic_apfixed_circ_table_arctan_128_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_apfixed_circ_table_arctan_128_ce0 : STD_LOGIC;
    signal cordic_apfixed_circ_table_arctan_128_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_1_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_1_reg_306_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln87_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_320 : STD_LOGIC_VECTOR (14 downto 0);
    signal tx_fu_241_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tx_reg_325 : STD_LOGIC_VECTOR (17 downto 0);
    signal ty_fu_249_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ty_reg_330 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln87_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tz_1_fu_52 : STD_LOGIC_VECTOR (17 downto 0);
    signal tz_fu_257_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal z_cast_fu_101_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal tx_1_fu_56 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_allocacmp_tx_1_load : STD_LOGIC_VECTOR (17 downto 0);
    signal ty_1_fu_60 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_allocacmp_ty_1_load : STD_LOGIC_VECTOR (17 downto 0);
    signal n_fu_64 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln87_fu_134_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln97_fu_187_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_s_fu_196_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_s_fu_190_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln99_fu_202_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln102_fu_205_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln107_fu_223_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln103_fu_211_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln108_fu_229_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln104_fu_217_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln109_fu_235_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1_cordic_apfixed_circ_table_arctanbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component fft32_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    cordic_apfixed_circ_table_arctan_128_U : component fft32_generic_sincos_16_4_Pipeline_VITIS_LOOP_87_1_cordic_apfixed_circ_table_arctanbkb
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_apfixed_circ_table_arctan_128_address0,
        ce0 => cordic_apfixed_circ_table_arctan_128_ce0,
        q0 => cordic_apfixed_circ_table_arctan_128_q0);

    flow_control_loop_pipe_sequential_init_U : component fft32_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    n_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln87_fu_128_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_64 <= add_ln87_fu_134_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_64 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    tx_1_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tx_1_fu_56 <= ap_const_lv18_4DBA;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    tx_1_fu_56 <= tx_reg_325;
                end if;
            end if; 
        end if;
    end process;

    ty_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    ty_1_fu_60 <= ap_const_lv18_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    ty_1_fu_60 <= ty_reg_330;
                end if;
            end if; 
        end if;
    end process;

    tz_1_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tz_1_fu_52 <= z_cast_fu_101_p1;
                elsif (((icmp_ln87_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    tz_1_fu_52 <= tz_fu_257_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln87_reg_311 <= icmp_ln87_fu_128_p2;
                icmp_ln87_reg_311_pp0_iter1_reg <= icmp_ln87_reg_311;
                n_1_reg_306 <= ap_sig_allocacmp_n_1;
                n_1_reg_306_pp0_iter1_reg <= n_1_reg_306;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_311 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_320 <= cordic_apfixed_circ_table_arctan_128_q0(125 downto 111);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tx_reg_325 <= tx_fu_241_p3;
                ty_reg_330 <= ty_fu_249_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln102_fu_205_p2 <= std_logic_vector(unsigned(y_s_fu_196_p2) + unsigned(ap_sig_allocacmp_tx_1_load));
    add_ln104_fu_217_p2 <= std_logic_vector(unsigned(zext_ln99_fu_202_p1) + unsigned(tz_1_fu_52));
    add_ln108_fu_229_p2 <= std_logic_vector(unsigned(x_s_fu_190_p2) + unsigned(ap_sig_allocacmp_ty_1_load));
    add_ln87_fu_134_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_128_p2)
    begin
        if (((icmp_ln87_fu_128_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln87_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln87_reg_311_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_tx_1_load_assign_proc : process(ap_enable_reg_pp0_iter3, tx_reg_325, ap_block_pp0_stage0, tx_1_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_tx_1_load <= tx_reg_325;
        else 
            ap_sig_allocacmp_tx_1_load <= tx_1_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_ty_1_load_assign_proc : process(ap_enable_reg_pp0_iter3, ty_reg_330, ap_block_pp0_stage0, ty_1_fu_60)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_ty_1_load <= ty_reg_330;
        else 
            ap_sig_allocacmp_ty_1_load <= ty_1_fu_60;
        end if; 
    end process;

    cordic_apfixed_circ_table_arctan_128_address0 <= zext_ln87_fu_140_p1(7 - 1 downto 0);

    cordic_apfixed_circ_table_arctan_128_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cordic_apfixed_circ_table_arctan_128_ce0 <= ap_const_logic_1;
        else 
            cordic_apfixed_circ_table_arctan_128_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_179_p3 <= tz_1_fu_52(17 downto 17);
    icmp_ln87_fu_128_p2 <= "1" when (ap_sig_allocacmp_n_1 = ap_const_lv5_12) else "0";
    p_out <= ap_sig_allocacmp_ty_1_load(17 - 1 downto 0);
    p_out1 <= ap_sig_allocacmp_tx_1_load(17 - 1 downto 0);

    p_out1_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln87_reg_311_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln87_reg_311_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln103_fu_211_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ty_1_load) - unsigned(x_s_fu_190_p2));
    sub_ln107_fu_223_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_tx_1_load) - unsigned(y_s_fu_196_p2));
    sub_ln109_fu_235_p2 <= std_logic_vector(unsigned(tz_1_fu_52) - unsigned(zext_ln99_fu_202_p1));
    tx_fu_241_p3 <= 
        add_ln102_fu_205_p2 when (d_fu_179_p3(0) = '1') else 
        sub_ln107_fu_223_p2;
    ty_fu_249_p3 <= 
        sub_ln103_fu_211_p2 when (d_fu_179_p3(0) = '1') else 
        add_ln108_fu_229_p2;
    tz_fu_257_p3 <= 
        add_ln104_fu_217_p2 when (d_fu_179_p3(0) = '1') else 
        sub_ln109_fu_235_p2;
    x_s_fu_190_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_tx_1_load),to_integer(unsigned('0' & zext_ln97_fu_187_p1(18-1 downto 0)))));
    y_s_fu_196_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_ty_1_load),to_integer(unsigned('0' & zext_ln97_fu_187_p1(18-1 downto 0)))));
        z_cast_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z),18));

    zext_ln87_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_n_1),64));
    zext_ln97_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_1_reg_306_pp0_iter1_reg),18));
    zext_ln99_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_320),18));
end behav;
