-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft32_fft32_Pipeline_output_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    stage2_real : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_32 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_34 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_36 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_40 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_42 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_44 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_46 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_33 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_35 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_37 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_41 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_43 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_45 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_real_47 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_32 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_34 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_36 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_40 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_42 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_44 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_46 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_33 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_35 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_37 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_41 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_43 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_45 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage2_imag_47 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    out_stream_TVALID : OUT STD_LOGIC );
end;


architecture behav of fft32_fft32_Pipeline_output_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_589_p34 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_762 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_fu_659_p34 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln161_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_170 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln157_fu_579_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln157_fu_585_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_740_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft32_mux_32_5_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fft32_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_5_16_1_1_U75 : component fft32_mux_32_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => stage2_real,
        din1 => stage2_real_18,
        din2 => stage2_real_20,
        din3 => stage2_real_22,
        din4 => stage2_real_24,
        din5 => stage2_real_26,
        din6 => stage2_real_28,
        din7 => stage2_real_30,
        din8 => stage2_real_32,
        din9 => stage2_real_34,
        din10 => stage2_real_36,
        din11 => stage2_real_38,
        din12 => stage2_real_40,
        din13 => stage2_real_42,
        din14 => stage2_real_44,
        din15 => stage2_real_46,
        din16 => stage2_real_17,
        din17 => stage2_real_19,
        din18 => stage2_real_21,
        din19 => stage2_real_23,
        din20 => stage2_real_25,
        din21 => stage2_real_27,
        din22 => stage2_real_29,
        din23 => stage2_real_31,
        din24 => stage2_real_33,
        din25 => stage2_real_35,
        din26 => stage2_real_37,
        din27 => stage2_real_39,
        din28 => stage2_real_41,
        din29 => stage2_real_43,
        din30 => stage2_real_45,
        din31 => stage2_real_47,
        din32 => trunc_ln157_fu_585_p1,
        dout => tmp_fu_589_p34);

    mux_32_5_16_1_1_U76 : component fft32_mux_32_5_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 5,
        dout_WIDTH => 16)
    port map (
        din0 => stage2_imag,
        din1 => stage2_imag_18,
        din2 => stage2_imag_20,
        din3 => stage2_imag_22,
        din4 => stage2_imag_24,
        din5 => stage2_imag_26,
        din6 => stage2_imag_28,
        din7 => stage2_imag_30,
        din8 => stage2_imag_32,
        din9 => stage2_imag_34,
        din10 => stage2_imag_36,
        din11 => stage2_imag_38,
        din12 => stage2_imag_40,
        din13 => stage2_imag_42,
        din14 => stage2_imag_44,
        din15 => stage2_imag_46,
        din16 => stage2_imag_17,
        din17 => stage2_imag_19,
        din18 => stage2_imag_21,
        din19 => stage2_imag_23,
        din20 => stage2_imag_25,
        din21 => stage2_imag_27,
        din22 => stage2_imag_29,
        din23 => stage2_imag_31,
        din24 => stage2_imag_33,
        din25 => stage2_imag_35,
        din26 => stage2_imag_37,
        din27 => stage2_imag_39,
        din28 => stage2_imag_41,
        din29 => stage2_imag_43,
        din30 => stage2_imag_45,
        din31 => stage2_imag_47,
        din32 => trunc_ln157_fu_585_p1,
        dout => tmp_1_fu_659_p34);

    flow_control_loop_pipe_sequential_init_U : component fft32_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_573_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_170 <= add_ln157_fu_579_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_170 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_573_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln161_reg_772 <= icmp_ln161_fu_729_p2;
                tmp_1_reg_767 <= tmp_1_fu_659_p34;
                tmp_reg_762 <= tmp_fu_589_p34;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln157_fu_579_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, out_stream_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((out_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, out_stream_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((out_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, out_stream_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((out_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(out_stream_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (out_stream_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_573_p2)
    begin
        if (((icmp_ln157_fu_573_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_170, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_170;
        end if; 
    end process;

    icmp_ln157_fu_573_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv6_20) else "0";
    icmp_ln161_fu_729_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv6_1F) else "0";
    out_stream_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_740_p4),48));

    out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_stream_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_stream_TVALID <= ap_const_logic_1;
        else 
            out_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_740_p4 <= ((icmp_ln161_reg_772 & tmp_1_reg_767) & tmp_reg_762);
    trunc_ln157_fu_585_p1 <= ap_sig_allocacmp_i_1(5 - 1 downto 0);
end behav;
